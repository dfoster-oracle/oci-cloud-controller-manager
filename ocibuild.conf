# To use the OCI Build Service you place a file name ocibuild.conf at the root of your git repo.
# This file, written using the HOCON syntax, will cause a build to automatically be triggered when commits are pushed to your repo.
# The ocibuild.conf file also determines how build service executes the build commands on the source code in your repo.
#
# Build Service Reference: https://confluence.oci.oraclecorp.com/x/7kMZBg
# Where is my build: https://devops.oci.oraclecorp.com/build
# HOCON reference: https://github.com/lightbend/config/blob/master/HOCON.md
# Build Service Slack: #oci_build_svc_users

# Caution, using runnerTag = latest will break the local build of ocibuild.conf,
# for local ocibuild please use the version from above mentioned Build Service Reference
runnerTag = latest
name: oci-cloud-controller-manager
team: OKE
phoneBookId: oracle-kubernetes-engine
description: oci-cloud-controller-manager build for oke

# Kubernetes Version
k8sVersion: v1.30
version: ${k8sVersion}-${BLD_SHORT_COMMIT_HASH}-${BLD_NUMBER}

# CCM release version
majorVersion: 1
# update minorVersion for feature releases
minorVersion: 3
# update patchVersion for bugfixes and small improvements
patchVersion: 1
ccmVersion: ${k8sVersion}-${majorVersion}.${minorVersion}.${patchVersion}

initialBuildNumber = {
  "master": 1
  "internal": 1
}

releaseBranches: ["master", "release*", "internal"]
triggerOnCommitBranches: ["main", "pull-requests", "master", "internal", "release*"]
bitbucketTag: {"enabled": true, "tagName": ${ccmVersion}-${BLD_NUMBER}, "description": "cloud-provider-oci version "${ccmVersion}-${BLD_NUMBER}}

steps: [
  {
    name: dockerize_ccm
    type: dockerizer
    dockerBuildPwd: "."
    dockerBuildArgs: {
      "COMPONENT": "cloud-provider-oci oci-csi-node-driver"
    }
    images : [
      {
        platform: linux/amd64
        dockerFile:"./Dockerfile"
      },
      {
        platform: linux/arm64
        dockerFile:"./Dockerfile_arm"
      }
    ]
  },
  {
    name: publish_public_docker_ccm
    type: publishdocker
    dependsOn: dockerize_ccm
    repository: odo-docker-signed-local
    imageName: "oke-public-cloud-provider-oci"
    skipOnDryRun: false
  },
  {
    name: dockerize_fvd_hyperkube
    type: dockerizer
    dockerBuildPwd: "."
    dockerBuildArgs: {
      "COMPONENT": "oci-flexvolume-driver cloud-provider-oci oci-csi-node-driver"
    }
    images : [
      {
        platform: linux/amd64
        dockerFile:"./Dockerfile"
      },
      {
        platform: linux/arm64
        dockerFile:"./Dockerfile_arm"
      }
    ]
  },
  {
    name: publish_public_docker_fvd_hyperkube
    type: publishdocker
    dependsOn: dockerize_fvd_hyperkube
    repository: odo-docker-signed-local
    imageName: "oke-public-cloud-provider-oci-fvd"
    # skipOnDryRun: false
  },
  {
    name: build-dirs
    type: make
    makeCommands:
      [
        {target: "build-dirs"}
      ]
    artifacts:
      [
        "**"
      ]
  },
  {
    name: build-fvd
    dependsOn: build-dirs
    type: golang
    runnerImage: build-runner-golang-boring-ssl
    runnerTag: 1.0-BLD-3536.12
    goVersion: 1.22.2
    environment: {"CGO_ENABLED": "1", "GO111MODULE": "on"}
    goCommands:
      [
        {
          command: "build "
          args: "-o dist/oci-flexvolume-driver -ldflags '-X main.version="${version}"' ./cmd/oci-flexvolume-driver"
        }
      ]
    artifacts:
      [
        "**"
      ]
  },
    {
       name: build-fvd-arm
       dependsOn: build-dirs
       type: golang
       runnerImage: build-runner-golang-boring-ssl
       runnerTag: 1.0-BLD-3536.12
       goVersion: 1.22.2
       environment: { "CGO_ENABLED" : "0" , "GO111MODULE" :"on", "GOARCH" : "arm"}
       goCommands:
    [
        {
          command: "build "
          args: "-o dist/arm/oci-flexvolume-driver -ldflags '-X main.version="${version}"-arm' ./cmd/oci-flexvolume-driver"
        }
    ]
       artifacts:
       [
         "**"
       ]
    },
    {
    name: publish_fvd_binary
    type: publishgeneric
    dependsOn: build-fvd
    repository: clusters-dev-generic-local
    filesToPublish: [
     "dist/oci-flexvolume-driver"
    ]
    filePathsToPublish : [
      {
      localFile : "dist/oci-flexvolume-driver",
      targetDir : "/cloud-provider-oci/"${version}"/amd"
     }
    ]
    skipOnDryRun: false
    },
    {
     name: publish_fvd_binary_arm
     type: publishgeneric
     dependsOn: build-fvd-arm
     repository: clusters-dev-generic-local
     filesToPublish: [
       "dist/arm/oci-flexvolume-driver"
     ]
     filePathsToPublish : [
       {
        localFile : "dist/arm/oci-flexvolume-driver",
        targetDir : "/cloud-provider-oci/"${version}"/arm"
       }
     ]
     skipOnDryRun: false
    },
]
