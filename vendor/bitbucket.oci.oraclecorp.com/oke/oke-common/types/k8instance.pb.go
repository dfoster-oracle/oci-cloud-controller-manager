// Code generated by protoc-gen-go. DO NOT EDIT.
// source: k8instance.proto

/*
Package types is a generated protocol buffer package.

It is generated from these files:
	k8instance.proto
	bmcs.proto
	tenantagent.proto
	error.proto
	tmcollector.proto
	listoptions.proto
	settings.proto
	networkconfigs.proto
	resourceprincipals.proto

It has these top-level messages:
	K8Instance
	ClusterEndpointConfig
	ImagePolicyConfig
	KeyDetails
	K8InstanceRequest
	K8InstanceResponse
	K8InstanceNewRequest
	K8InstanceInstallOptions
	K8InstanceAdmissionControllerConfig
	InstanceNewJobFinishPayload
	K8InstanceNewResponse
	K8InstanceListRequest
	K8InstanceListResponse
	K8InstanceDeleteRequest
	K8InstanceDeleteResponse
	InstanceDeleteJobFinishPayload
	InstanceUpdateJobFinishPayload
	InstanceDeleteJobReschedulePayload
	K8InstanceUpdateRequest
	K8InstanceUpdateResponse
	K8InstanceUpdateTKMStateRequest
	K8InstanceUpdateTKMStateResponse
	BMConfig
	Bucket
	TKWClusterRequest
	FlannelConfig
	GetTKWClusterRequest
	TKWClusterResponse
	BuildInfo
	UpdateNodePoolRequest
	DeleteNodePoolRequest
	Error
	ClusterNodesState
	ClusterNodesStateResponse
	TMCollectorToken
	ListOptions
	SettingsListRequest
	SettingsListResponse
	SettingsGetRequest
	SettingsGetResponse
	SettingsNewRequest
	SettingsNewResponse
	SettingsUpdateRequest
	SettingsUpdateResponse
	SettingsDeleteRequest
	Setting
	NetworkConfig
	SetResourcePrincipalRequest
	ResourcePrincipal
	SetResourcePrincipalResponse
*/
package types

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import lists "bitbucket.oci.oraclecorp.com/oke/oke-common/types/lists"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PodSecurityPolicy int32

const (
	PodSecurityPolicy_Disabled        PodSecurityPolicy = 0
	PodSecurityPolicy_EnabledNoPolicy PodSecurityPolicy = 1
)

var PodSecurityPolicy_name = map[int32]string{
	0: "Disabled",
	1: "EnabledNoPolicy",
}
var PodSecurityPolicy_value = map[string]int32{
	"Disabled":        0,
	"EnabledNoPolicy": 1,
}

func (x PodSecurityPolicy) String() string {
	return proto.EnumName(PodSecurityPolicy_name, int32(x))
}
func (PodSecurityPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type TKMState int32

const (
	TKMState_Initializing      TKMState = 0
	TKMState_Running           TKMState = 1
	TKMState_Succeeded         TKMState = 2
	TKMState_Failed            TKMState = 3
	TKMState_Unknown           TKMState = 4
	TKMState_Terminating       TKMState = 5
	TKMState_Terminated        TKMState = 6
	TKMState_Updating_Pools    TKMState = 7
	TKMState_Updating_Masters  TKMState = 8
	TKMState_Upgrading_Masters TKMState = 9
)

var TKMState_name = map[int32]string{
	0: "Initializing",
	1: "Running",
	2: "Succeeded",
	3: "Failed",
	4: "Unknown",
	5: "Terminating",
	6: "Terminated",
	7: "Updating_Pools",
	8: "Updating_Masters",
	9: "Upgrading_Masters",
}
var TKMState_value = map[string]int32{
	"Initializing":      0,
	"Running":           1,
	"Succeeded":         2,
	"Failed":            3,
	"Unknown":           4,
	"Terminating":       5,
	"Terminated":        6,
	"Updating_Pools":    7,
	"Updating_Masters":  8,
	"Upgrading_Masters": 9,
}

func (x TKMState) String() string {
	return proto.EnumName(TKMState_name, int32(x))
}
func (TKMState) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type K8Instance struct {
	ID                     string                      `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	K8Addr                 string                      `protobuf:"bytes,4,opt,name=K8Addr" json:"K8Addr,omitempty"`
	TKMState               TKMState                    `protobuf:"varint,20,opt,name=TKMState,enum=types.TKMState" json:"TKMState,omitempty"`
	TKMStateDetails        string                      `protobuf:"bytes,21,opt,name=TKMStateDetails" json:"TKMStateDetails,omitempty"`
	Cloud                  string                      `protobuf:"bytes,6,opt,name=Cloud" json:"Cloud,omitempty"`
	LBType                 string                      `protobuf:"bytes,7,opt,name=LBType" json:"LBType,omitempty"`
	ETCDAddress            string                      `protobuf:"bytes,10,opt,name=ETCDAddress" json:"ETCDAddress,omitempty"`
	Err                    string                      `protobuf:"bytes,11,opt,name=Err" json:"Err,omitempty"`
	Name                   string                      `protobuf:"bytes,15,opt,name=Name" json:"Name,omitempty"`
	K8Version              string                      `protobuf:"bytes,17,opt,name=K8Version" json:"K8Version,omitempty"`
	AvailableK8SUpgrades   []string                    `protobuf:"bytes,18,rep,name=AvailableK8SUpgrades" json:"AvailableK8SUpgrades,omitempty"`
	Metadata               map[string]string           `protobuf:"bytes,19,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeletedAt              *google_protobuf1.Timestamp `protobuf:"bytes,22,opt,name=DeletedAt" json:"DeletedAt,omitempty"`
	AnsiblePlaybookVersion string                      `protobuf:"bytes,23,opt,name=AnsiblePlaybookVersion" json:"AnsiblePlaybookVersion,omitempty"`
	CompartmentID          string                      `protobuf:"bytes,24,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	NetworkConfig          *NetworkConfig              `protobuf:"bytes,25,opt,name=NetworkConfig" json:"NetworkConfig,omitempty"`
	TenancyID              string                      `protobuf:"bytes,26,opt,name=TenancyID" json:"TenancyID,omitempty"`
	InstallOptions         *K8InstanceInstallOptions   `protobuf:"bytes,27,opt,name=InstallOptions" json:"InstallOptions,omitempty"`
	CreatedAt              *google_protobuf1.Timestamp `protobuf:"bytes,28,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	ETag                   string                      `protobuf:"bytes,30,opt,name=ETag" json:"ETag,omitempty"`
	InternalMetadata       map[string]string           `protobuf:"bytes,31,rep,name=InternalMetadata" json:"InternalMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	KMSKeyID               string                      `protobuf:"bytes,32,opt,name=KMSKeyID" json:"KMSKeyID,omitempty"`
	PublicIP               string                      `protobuf:"bytes,33,opt,name=PublicIP" json:"PublicIP,omitempty"`
	PrivateIP              string                      `protobuf:"bytes,34,opt,name=PrivateIP" json:"PrivateIP,omitempty"`
	ClusterEndpointConfig  *ClusterEndpointConfig      `protobuf:"bytes,35,opt,name=ClusterEndpointConfig" json:"ClusterEndpointConfig,omitempty"`
	ImagePolicyConfig      *ImagePolicyConfig          `protobuf:"bytes,36,opt,name=ImagePolicyConfig" json:"ImagePolicyConfig,omitempty"`
}

func (m *K8Instance) Reset()                    { *m = K8Instance{} }
func (m *K8Instance) String() string            { return proto.CompactTextString(m) }
func (*K8Instance) ProtoMessage()               {}
func (*K8Instance) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *K8Instance) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *K8Instance) GetK8Addr() string {
	if m != nil {
		return m.K8Addr
	}
	return ""
}

func (m *K8Instance) GetTKMState() TKMState {
	if m != nil {
		return m.TKMState
	}
	return TKMState_Initializing
}

func (m *K8Instance) GetTKMStateDetails() string {
	if m != nil {
		return m.TKMStateDetails
	}
	return ""
}

func (m *K8Instance) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *K8Instance) GetLBType() string {
	if m != nil {
		return m.LBType
	}
	return ""
}

func (m *K8Instance) GetETCDAddress() string {
	if m != nil {
		return m.ETCDAddress
	}
	return ""
}

func (m *K8Instance) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *K8Instance) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8Instance) GetK8Version() string {
	if m != nil {
		return m.K8Version
	}
	return ""
}

func (m *K8Instance) GetAvailableK8SUpgrades() []string {
	if m != nil {
		return m.AvailableK8SUpgrades
	}
	return nil
}

func (m *K8Instance) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *K8Instance) GetDeletedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *K8Instance) GetAnsiblePlaybookVersion() string {
	if m != nil {
		return m.AnsiblePlaybookVersion
	}
	return ""
}

func (m *K8Instance) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *K8Instance) GetNetworkConfig() *NetworkConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *K8Instance) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *K8Instance) GetInstallOptions() *K8InstanceInstallOptions {
	if m != nil {
		return m.InstallOptions
	}
	return nil
}

func (m *K8Instance) GetCreatedAt() *google_protobuf1.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *K8Instance) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *K8Instance) GetInternalMetadata() map[string]string {
	if m != nil {
		return m.InternalMetadata
	}
	return nil
}

func (m *K8Instance) GetKMSKeyID() string {
	if m != nil {
		return m.KMSKeyID
	}
	return ""
}

func (m *K8Instance) GetPublicIP() string {
	if m != nil {
		return m.PublicIP
	}
	return ""
}

func (m *K8Instance) GetPrivateIP() string {
	if m != nil {
		return m.PrivateIP
	}
	return ""
}

func (m *K8Instance) GetClusterEndpointConfig() *ClusterEndpointConfig {
	if m != nil {
		return m.ClusterEndpointConfig
	}
	return nil
}

func (m *K8Instance) GetImagePolicyConfig() *ImagePolicyConfig {
	if m != nil {
		return m.ImagePolicyConfig
	}
	return nil
}

type ClusterEndpointConfig struct {
	SubnetID          string   `protobuf:"bytes,1,opt,name=SubnetID" json:"SubnetID,omitempty"`
	NSGIDs            []string `protobuf:"bytes,2,rep,name=NSGIDs" json:"NSGIDs,omitempty"`
	IsPublicIPEnabled bool     `protobuf:"varint,3,opt,name=IsPublicIPEnabled" json:"IsPublicIPEnabled,omitempty"`
}

func (m *ClusterEndpointConfig) Reset()                    { *m = ClusterEndpointConfig{} }
func (m *ClusterEndpointConfig) String() string            { return proto.CompactTextString(m) }
func (*ClusterEndpointConfig) ProtoMessage()               {}
func (*ClusterEndpointConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClusterEndpointConfig) GetSubnetID() string {
	if m != nil {
		return m.SubnetID
	}
	return ""
}

func (m *ClusterEndpointConfig) GetNSGIDs() []string {
	if m != nil {
		return m.NSGIDs
	}
	return nil
}

func (m *ClusterEndpointConfig) GetIsPublicIPEnabled() bool {
	if m != nil {
		return m.IsPublicIPEnabled
	}
	return false
}

type ImagePolicyConfig struct {
	IsPolicyEnabled bool          `protobuf:"varint,1,opt,name=IsPolicyEnabled" json:"IsPolicyEnabled,omitempty"`
	KeyDetails      []*KeyDetails `protobuf:"bytes,2,rep,name=KeyDetails" json:"KeyDetails,omitempty"`
}

func (m *ImagePolicyConfig) Reset()                    { *m = ImagePolicyConfig{} }
func (m *ImagePolicyConfig) String() string            { return proto.CompactTextString(m) }
func (*ImagePolicyConfig) ProtoMessage()               {}
func (*ImagePolicyConfig) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ImagePolicyConfig) GetIsPolicyEnabled() bool {
	if m != nil {
		return m.IsPolicyEnabled
	}
	return false
}

func (m *ImagePolicyConfig) GetKeyDetails() []*KeyDetails {
	if m != nil {
		return m.KeyDetails
	}
	return nil
}

type KeyDetails struct {
	KmsKeyId string `protobuf:"bytes,1,opt,name=kmsKeyId" json:"kmsKeyId,omitempty"`
}

func (m *KeyDetails) Reset()                    { *m = KeyDetails{} }
func (m *KeyDetails) String() string            { return proto.CompactTextString(m) }
func (*KeyDetails) ProtoMessage()               {}
func (*KeyDetails) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *KeyDetails) GetKmsKeyId() string {
	if m != nil {
		return m.KmsKeyId
	}
	return ""
}

type K8InstanceRequest struct {
	K8Instance *K8Instance `protobuf:"bytes,1,opt,name=K8Instance" json:"K8Instance,omitempty"`
}

func (m *K8InstanceRequest) Reset()                    { *m = K8InstanceRequest{} }
func (m *K8InstanceRequest) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceRequest) ProtoMessage()               {}
func (*K8InstanceRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *K8InstanceRequest) GetK8Instance() *K8Instance {
	if m != nil {
		return m.K8Instance
	}
	return nil
}

type K8InstanceResponse struct {
	K8Instance *K8Instance `protobuf:"bytes,1,opt,name=K8Instance" json:"K8Instance,omitempty"`
}

func (m *K8InstanceResponse) Reset()                    { *m = K8InstanceResponse{} }
func (m *K8InstanceResponse) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceResponse) ProtoMessage()               {}
func (*K8InstanceResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *K8InstanceResponse) GetK8Instance() *K8Instance {
	if m != nil {
		return m.K8Instance
	}
	return nil
}

type K8InstanceNewRequest struct {
	Cloud                     string                               `protobuf:"bytes,2,opt,name=Cloud" json:"Cloud,omitempty"`
	LBType                    string                               `protobuf:"bytes,3,opt,name=LBType" json:"LBType,omitempty"`
	Name                      string                               `protobuf:"bytes,9,opt,name=Name" json:"Name,omitempty"`
	K8Version                 string                               `protobuf:"bytes,11,opt,name=K8Version" json:"K8Version,omitempty"`
	Metadata                  map[string]string                    `protobuf:"bytes,12,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CompartmentID             string                               `protobuf:"bytes,14,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	NetworkConfig             *NetworkConfig                       `protobuf:"bytes,15,opt,name=NetworkConfig" json:"NetworkConfig,omitempty"`
	TenancyID                 string                               `protobuf:"bytes,16,opt,name=TenancyID" json:"TenancyID,omitempty"`
	RegionName                string                               `protobuf:"bytes,17,opt,name=RegionName" json:"RegionName,omitempty"`
	RegionKey                 string                               `protobuf:"bytes,18,opt,name=RegionKey" json:"RegionKey,omitempty"`
	InstallOptions            *K8InstanceInstallOptions            `protobuf:"bytes,19,opt,name=InstallOptions" json:"InstallOptions,omitempty"`
	InternalMetadata          map[string]string                    `protobuf:"bytes,20,rep,name=InternalMetadata" json:"InternalMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AnsiblePlaybookVersion    string                               `protobuf:"bytes,21,opt,name=AnsiblePlaybookVersion" json:"AnsiblePlaybookVersion,omitempty"`
	KMSKeyID                  string                               `protobuf:"bytes,22,opt,name=KMSKeyID" json:"KMSKeyID,omitempty"`
	AdmissionControllerConfig *K8InstanceAdmissionControllerConfig `protobuf:"bytes,23,opt,name=AdmissionControllerConfig" json:"AdmissionControllerConfig,omitempty"`
	ClusterEndpointConfig     *ClusterEndpointConfig               `protobuf:"bytes,24,opt,name=ClusterEndpointConfig" json:"ClusterEndpointConfig,omitempty"`
	ImagePolicyConfig         *ImagePolicyConfig                   `protobuf:"bytes,25,opt,name=ImagePolicyConfig" json:"ImagePolicyConfig,omitempty"`
}

func (m *K8InstanceNewRequest) Reset()                    { *m = K8InstanceNewRequest{} }
func (m *K8InstanceNewRequest) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceNewRequest) ProtoMessage()               {}
func (*K8InstanceNewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *K8InstanceNewRequest) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *K8InstanceNewRequest) GetLBType() string {
	if m != nil {
		return m.LBType
	}
	return ""
}

func (m *K8InstanceNewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8InstanceNewRequest) GetK8Version() string {
	if m != nil {
		return m.K8Version
	}
	return ""
}

func (m *K8InstanceNewRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *K8InstanceNewRequest) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *K8InstanceNewRequest) GetNetworkConfig() *NetworkConfig {
	if m != nil {
		return m.NetworkConfig
	}
	return nil
}

func (m *K8InstanceNewRequest) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *K8InstanceNewRequest) GetRegionName() string {
	if m != nil {
		return m.RegionName
	}
	return ""
}

func (m *K8InstanceNewRequest) GetRegionKey() string {
	if m != nil {
		return m.RegionKey
	}
	return ""
}

func (m *K8InstanceNewRequest) GetInstallOptions() *K8InstanceInstallOptions {
	if m != nil {
		return m.InstallOptions
	}
	return nil
}

func (m *K8InstanceNewRequest) GetInternalMetadata() map[string]string {
	if m != nil {
		return m.InternalMetadata
	}
	return nil
}

func (m *K8InstanceNewRequest) GetAnsiblePlaybookVersion() string {
	if m != nil {
		return m.AnsiblePlaybookVersion
	}
	return ""
}

func (m *K8InstanceNewRequest) GetKMSKeyID() string {
	if m != nil {
		return m.KMSKeyID
	}
	return ""
}

func (m *K8InstanceNewRequest) GetAdmissionControllerConfig() *K8InstanceAdmissionControllerConfig {
	if m != nil {
		return m.AdmissionControllerConfig
	}
	return nil
}

func (m *K8InstanceNewRequest) GetClusterEndpointConfig() *ClusterEndpointConfig {
	if m != nil {
		return m.ClusterEndpointConfig
	}
	return nil
}

func (m *K8InstanceNewRequest) GetImagePolicyConfig() *ImagePolicyConfig {
	if m != nil {
		return m.ImagePolicyConfig
	}
	return nil
}

type K8InstanceInstallOptions struct {
	HasTiller              bool              `protobuf:"varint,1,opt,name=HasTiller" json:"HasTiller,omitempty"`
	HasKubernetesDashboard bool              `protobuf:"varint,2,opt,name=HasKubernetesDashboard" json:"HasKubernetesDashboard,omitempty"`
	PodSecurityPolicy      PodSecurityPolicy `protobuf:"varint,3,opt,name=PodSecurityPolicy,enum=types.PodSecurityPolicy" json:"PodSecurityPolicy,omitempty"`
}

func (m *K8InstanceInstallOptions) Reset()                    { *m = K8InstanceInstallOptions{} }
func (m *K8InstanceInstallOptions) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceInstallOptions) ProtoMessage()               {}
func (*K8InstanceInstallOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *K8InstanceInstallOptions) GetHasTiller() bool {
	if m != nil {
		return m.HasTiller
	}
	return false
}

func (m *K8InstanceInstallOptions) GetHasKubernetesDashboard() bool {
	if m != nil {
		return m.HasKubernetesDashboard
	}
	return false
}

func (m *K8InstanceInstallOptions) GetPodSecurityPolicy() PodSecurityPolicy {
	if m != nil {
		return m.PodSecurityPolicy
	}
	return PodSecurityPolicy_Disabled
}

type K8InstanceAdmissionControllerConfig struct {
	EnablePodSecurityPolicy bool `protobuf:"varint,1,opt,name=enablePodSecurityPolicy" json:"enablePodSecurityPolicy,omitempty"`
}

func (m *K8InstanceAdmissionControllerConfig) Reset()         { *m = K8InstanceAdmissionControllerConfig{} }
func (m *K8InstanceAdmissionControllerConfig) String() string { return proto.CompactTextString(m) }
func (*K8InstanceAdmissionControllerConfig) ProtoMessage()    {}
func (*K8InstanceAdmissionControllerConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{8}
}

func (m *K8InstanceAdmissionControllerConfig) GetEnablePodSecurityPolicy() bool {
	if m != nil {
		return m.EnablePodSecurityPolicy
	}
	return false
}

type InstanceNewJobFinishPayload struct {
	K8Addr      string   `protobuf:"bytes,1,opt,name=K8Addr" json:"K8Addr,omitempty"`
	ETCDAddress string   `protobuf:"bytes,4,opt,name=ETCDAddress" json:"ETCDAddress,omitempty"`
	TKMState    TKMState `protobuf:"varint,12,opt,name=TKMState,enum=types.TKMState" json:"TKMState,omitempty"`
	Logs        string   `protobuf:"bytes,6,opt,name=Logs" json:"Logs,omitempty"`
	Cloud       string   `protobuf:"bytes,8,opt,name=Cloud" json:"Cloud,omitempty"`
	LBType      string   `protobuf:"bytes,9,opt,name=LBType" json:"LBType,omitempty"`
}

func (m *InstanceNewJobFinishPayload) Reset()                    { *m = InstanceNewJobFinishPayload{} }
func (m *InstanceNewJobFinishPayload) String() string            { return proto.CompactTextString(m) }
func (*InstanceNewJobFinishPayload) ProtoMessage()               {}
func (*InstanceNewJobFinishPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *InstanceNewJobFinishPayload) GetK8Addr() string {
	if m != nil {
		return m.K8Addr
	}
	return ""
}

func (m *InstanceNewJobFinishPayload) GetETCDAddress() string {
	if m != nil {
		return m.ETCDAddress
	}
	return ""
}

func (m *InstanceNewJobFinishPayload) GetTKMState() TKMState {
	if m != nil {
		return m.TKMState
	}
	return TKMState_Initializing
}

func (m *InstanceNewJobFinishPayload) GetLogs() string {
	if m != nil {
		return m.Logs
	}
	return ""
}

func (m *InstanceNewJobFinishPayload) GetCloud() string {
	if m != nil {
		return m.Cloud
	}
	return ""
}

func (m *InstanceNewJobFinishPayload) GetLBType() string {
	if m != nil {
		return m.LBType
	}
	return ""
}

type K8InstanceNewResponse struct {
	JobID     string `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
}

func (m *K8InstanceNewResponse) Reset()                    { *m = K8InstanceNewResponse{} }
func (m *K8InstanceNewResponse) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceNewResponse) ProtoMessage()               {}
func (*K8InstanceNewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *K8InstanceNewResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *K8InstanceNewResponse) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type K8InstanceListRequest struct {
	MastersStateExclusions []TKMState        `protobuf:"varint,2,rep,packed,name=MastersStateExclusions,enum=types.TKMState" json:"MastersStateExclusions,omitempty"`
	ListOptions            *ListOptions      `protobuf:"bytes,3,opt,name=ListOptions" json:"ListOptions,omitempty"`
	TenancyID              string            `protobuf:"bytes,4,opt,name=TenancyID" json:"TenancyID,omitempty"`
	CompartmentID          string            `protobuf:"bytes,5,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	OrderBy                []*lists.OrderBy  `protobuf:"bytes,6,rep,name=OrderBy" json:"OrderBy,omitempty"`
	LifecycleState         []TKMState        `protobuf:"varint,7,rep,packed,name=LifecycleState,enum=types.TKMState" json:"LifecycleState,omitempty"`
	Name                   string            `protobuf:"bytes,8,opt,name=Name" json:"Name,omitempty"`
	Metadata               map[string]string `protobuf:"bytes,9,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *K8InstanceListRequest) Reset()                    { *m = K8InstanceListRequest{} }
func (m *K8InstanceListRequest) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceListRequest) ProtoMessage()               {}
func (*K8InstanceListRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *K8InstanceListRequest) GetMastersStateExclusions() []TKMState {
	if m != nil {
		return m.MastersStateExclusions
	}
	return nil
}

func (m *K8InstanceListRequest) GetListOptions() *ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

func (m *K8InstanceListRequest) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *K8InstanceListRequest) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *K8InstanceListRequest) GetOrderBy() []*lists.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *K8InstanceListRequest) GetLifecycleState() []TKMState {
	if m != nil {
		return m.LifecycleState
	}
	return nil
}

func (m *K8InstanceListRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8InstanceListRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

type K8InstanceListResponse struct {
	K8Instances     []*K8Instance `protobuf:"bytes,1,rep,name=K8Instances" json:"K8Instances,omitempty"`
	Total           int32         `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
	PaginationToken string        `protobuf:"bytes,3,opt,name=paginationToken" json:"paginationToken,omitempty"`
}

func (m *K8InstanceListResponse) Reset()                    { *m = K8InstanceListResponse{} }
func (m *K8InstanceListResponse) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceListResponse) ProtoMessage()               {}
func (*K8InstanceListResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *K8InstanceListResponse) GetK8Instances() []*K8Instance {
	if m != nil {
		return m.K8Instances
	}
	return nil
}

func (m *K8InstanceListResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *K8InstanceListResponse) GetPaginationToken() string {
	if m != nil {
		return m.PaginationToken
	}
	return ""
}

type K8InstanceDeleteRequest struct {
	ID       string            `protobuf:"bytes,2,opt,name=ID" json:"ID,omitempty"`
	Metadata map[string]string `protobuf:"bytes,3,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ETag     string            `protobuf:"bytes,4,opt,name=ETag" json:"ETag,omitempty"`
}

func (m *K8InstanceDeleteRequest) Reset()                    { *m = K8InstanceDeleteRequest{} }
func (m *K8InstanceDeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceDeleteRequest) ProtoMessage()               {}
func (*K8InstanceDeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *K8InstanceDeleteRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *K8InstanceDeleteRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *K8InstanceDeleteRequest) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

type K8InstanceDeleteResponse struct {
	JobID     string `protobuf:"bytes,1,opt,name=JobID" json:"JobID,omitempty"`
	ClusterID string `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
}

func (m *K8InstanceDeleteResponse) Reset()                    { *m = K8InstanceDeleteResponse{} }
func (m *K8InstanceDeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceDeleteResponse) ProtoMessage()               {}
func (*K8InstanceDeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *K8InstanceDeleteResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

func (m *K8InstanceDeleteResponse) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

type InstanceDeleteJobFinishPayload struct {
}

func (m *InstanceDeleteJobFinishPayload) Reset()                    { *m = InstanceDeleteJobFinishPayload{} }
func (m *InstanceDeleteJobFinishPayload) String() string            { return proto.CompactTextString(m) }
func (*InstanceDeleteJobFinishPayload) ProtoMessage()               {}
func (*InstanceDeleteJobFinishPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

type InstanceUpdateJobFinishPayload struct {
	TKMState        TKMState `protobuf:"varint,2,opt,name=TKMState,enum=types.TKMState" json:"TKMState,omitempty"`
	K8SVersion      string   `protobuf:"bytes,3,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	TKMStateDetails string   `protobuf:"bytes,4,opt,name=TKMStateDetails" json:"TKMStateDetails,omitempty"`
	TKWVersion      string   `protobuf:"bytes,5,opt,name=TKWVersion" json:"TKWVersion,omitempty"`
}

func (m *InstanceUpdateJobFinishPayload) Reset()                    { *m = InstanceUpdateJobFinishPayload{} }
func (m *InstanceUpdateJobFinishPayload) String() string            { return proto.CompactTextString(m) }
func (*InstanceUpdateJobFinishPayload) ProtoMessage()               {}
func (*InstanceUpdateJobFinishPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *InstanceUpdateJobFinishPayload) GetTKMState() TKMState {
	if m != nil {
		return m.TKMState
	}
	return TKMState_Initializing
}

func (m *InstanceUpdateJobFinishPayload) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *InstanceUpdateJobFinishPayload) GetTKMStateDetails() string {
	if m != nil {
		return m.TKMStateDetails
	}
	return ""
}

func (m *InstanceUpdateJobFinishPayload) GetTKWVersion() string {
	if m != nil {
		return m.TKWVersion
	}
	return ""
}

type InstanceDeleteJobReschedulePayload struct {
}

func (m *InstanceDeleteJobReschedulePayload) Reset()         { *m = InstanceDeleteJobReschedulePayload{} }
func (m *InstanceDeleteJobReschedulePayload) String() string { return proto.CompactTextString(m) }
func (*InstanceDeleteJobReschedulePayload) ProtoMessage()    {}
func (*InstanceDeleteJobReschedulePayload) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{17}
}

type K8InstanceUpdateRequest struct {
	ClusterID                 string                               `protobuf:"bytes,1,opt,name=ClusterID" json:"ClusterID,omitempty"`
	AffectedFields            map[string]bool                      `protobuf:"bytes,2,rep,name=AffectedFields" json:"AffectedFields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Metadata                  map[string]string                    `protobuf:"bytes,3,rep,name=Metadata" json:"Metadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Name                      string                               `protobuf:"bytes,4,opt,name=Name" json:"Name,omitempty"`
	K8SVersion                string                               `protobuf:"bytes,5,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	ETag                      string                               `protobuf:"bytes,6,opt,name=ETag" json:"ETag,omitempty"`
	InternalMetadata          map[string]string                    `protobuf:"bytes,7,rep,name=InternalMetadata" json:"InternalMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AdmissionControllerConfig *K8InstanceAdmissionControllerConfig `protobuf:"bytes,8,opt,name=AdmissionControllerConfig" json:"AdmissionControllerConfig,omitempty"`
	ImagePolicyConfig         *ImagePolicyConfig                   `protobuf:"bytes,9,opt,name=ImagePolicyConfig" json:"ImagePolicyConfig,omitempty"`
}

func (m *K8InstanceUpdateRequest) Reset()                    { *m = K8InstanceUpdateRequest{} }
func (m *K8InstanceUpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceUpdateRequest) ProtoMessage()               {}
func (*K8InstanceUpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *K8InstanceUpdateRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *K8InstanceUpdateRequest) GetAffectedFields() map[string]bool {
	if m != nil {
		return m.AffectedFields
	}
	return nil
}

func (m *K8InstanceUpdateRequest) GetMetadata() map[string]string {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *K8InstanceUpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *K8InstanceUpdateRequest) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *K8InstanceUpdateRequest) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *K8InstanceUpdateRequest) GetInternalMetadata() map[string]string {
	if m != nil {
		return m.InternalMetadata
	}
	return nil
}

func (m *K8InstanceUpdateRequest) GetAdmissionControllerConfig() *K8InstanceAdmissionControllerConfig {
	if m != nil {
		return m.AdmissionControllerConfig
	}
	return nil
}

func (m *K8InstanceUpdateRequest) GetImagePolicyConfig() *ImagePolicyConfig {
	if m != nil {
		return m.ImagePolicyConfig
	}
	return nil
}

type K8InstanceUpdateResponse struct {
	ClusterID string `protobuf:"bytes,1,opt,name=ClusterID" json:"ClusterID,omitempty"`
	JobID     string `protobuf:"bytes,2,opt,name=JobID" json:"JobID,omitempty"`
}

func (m *K8InstanceUpdateResponse) Reset()                    { *m = K8InstanceUpdateResponse{} }
func (m *K8InstanceUpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*K8InstanceUpdateResponse) ProtoMessage()               {}
func (*K8InstanceUpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *K8InstanceUpdateResponse) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *K8InstanceUpdateResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

type K8InstanceUpdateTKMStateRequest struct {
	ClusterID  string `protobuf:"bytes,1,opt,name=ClusterID" json:"ClusterID,omitempty"`
	K8SVersion string `protobuf:"bytes,2,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
}

func (m *K8InstanceUpdateTKMStateRequest) Reset()         { *m = K8InstanceUpdateTKMStateRequest{} }
func (m *K8InstanceUpdateTKMStateRequest) String() string { return proto.CompactTextString(m) }
func (*K8InstanceUpdateTKMStateRequest) ProtoMessage()    {}
func (*K8InstanceUpdateTKMStateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{20}
}

func (m *K8InstanceUpdateTKMStateRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *K8InstanceUpdateTKMStateRequest) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

type K8InstanceUpdateTKMStateResponse struct {
}

func (m *K8InstanceUpdateTKMStateResponse) Reset()         { *m = K8InstanceUpdateTKMStateResponse{} }
func (m *K8InstanceUpdateTKMStateResponse) String() string { return proto.CompactTextString(m) }
func (*K8InstanceUpdateTKMStateResponse) ProtoMessage()    {}
func (*K8InstanceUpdateTKMStateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{21}
}

func init() {
	proto.RegisterType((*K8Instance)(nil), "types.K8Instance")
	proto.RegisterType((*ClusterEndpointConfig)(nil), "types.ClusterEndpointConfig")
	proto.RegisterType((*ImagePolicyConfig)(nil), "types.ImagePolicyConfig")
	proto.RegisterType((*KeyDetails)(nil), "types.KeyDetails")
	proto.RegisterType((*K8InstanceRequest)(nil), "types.K8InstanceRequest")
	proto.RegisterType((*K8InstanceResponse)(nil), "types.K8InstanceResponse")
	proto.RegisterType((*K8InstanceNewRequest)(nil), "types.K8InstanceNewRequest")
	proto.RegisterType((*K8InstanceInstallOptions)(nil), "types.K8InstanceInstallOptions")
	proto.RegisterType((*K8InstanceAdmissionControllerConfig)(nil), "types.K8InstanceAdmissionControllerConfig")
	proto.RegisterType((*InstanceNewJobFinishPayload)(nil), "types.InstanceNewJobFinishPayload")
	proto.RegisterType((*K8InstanceNewResponse)(nil), "types.K8InstanceNewResponse")
	proto.RegisterType((*K8InstanceListRequest)(nil), "types.K8InstanceListRequest")
	proto.RegisterType((*K8InstanceListResponse)(nil), "types.K8InstanceListResponse")
	proto.RegisterType((*K8InstanceDeleteRequest)(nil), "types.K8InstanceDeleteRequest")
	proto.RegisterType((*K8InstanceDeleteResponse)(nil), "types.K8InstanceDeleteResponse")
	proto.RegisterType((*InstanceDeleteJobFinishPayload)(nil), "types.InstanceDeleteJobFinishPayload")
	proto.RegisterType((*InstanceUpdateJobFinishPayload)(nil), "types.InstanceUpdateJobFinishPayload")
	proto.RegisterType((*InstanceDeleteJobReschedulePayload)(nil), "types.InstanceDeleteJobReschedulePayload")
	proto.RegisterType((*K8InstanceUpdateRequest)(nil), "types.K8InstanceUpdateRequest")
	proto.RegisterType((*K8InstanceUpdateResponse)(nil), "types.K8InstanceUpdateResponse")
	proto.RegisterType((*K8InstanceUpdateTKMStateRequest)(nil), "types.K8InstanceUpdateTKMStateRequest")
	proto.RegisterType((*K8InstanceUpdateTKMStateResponse)(nil), "types.K8InstanceUpdateTKMStateResponse")
	proto.RegisterEnum("types.PodSecurityPolicy", PodSecurityPolicy_name, PodSecurityPolicy_value)
	proto.RegisterEnum("types.TKMState", TKMState_name, TKMState_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for K8InstanceStore service

type K8InstanceStoreClient interface {
	K8InstanceList(ctx context.Context, in *K8InstanceListRequest, opts ...grpc.CallOption) (*K8InstanceListResponse, error)
	K8InstanceNew(ctx context.Context, in *K8InstanceNewRequest, opts ...grpc.CallOption) (*K8InstanceNewResponse, error)
	K8InstanceGet(ctx context.Context, in *K8InstanceRequest, opts ...grpc.CallOption) (*K8InstanceResponse, error)
	K8InstanceDelete(ctx context.Context, in *K8InstanceDeleteRequest, opts ...grpc.CallOption) (*K8InstanceDeleteResponse, error)
	K8InstanceUpdate(ctx context.Context, in *K8InstanceUpdateRequest, opts ...grpc.CallOption) (*K8InstanceUpdateResponse, error)
	K8InstanceUpdateTKMState(ctx context.Context, in *K8InstanceUpdateTKMStateRequest, opts ...grpc.CallOption) (*K8InstanceUpdateTKMStateResponse, error)
}

type k8InstanceStoreClient struct {
	cc *grpc.ClientConn
}

func NewK8InstanceStoreClient(cc *grpc.ClientConn) K8InstanceStoreClient {
	return &k8InstanceStoreClient{cc}
}

func (c *k8InstanceStoreClient) K8InstanceList(ctx context.Context, in *K8InstanceListRequest, opts ...grpc.CallOption) (*K8InstanceListResponse, error) {
	out := new(K8InstanceListResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceList", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8InstanceStoreClient) K8InstanceNew(ctx context.Context, in *K8InstanceNewRequest, opts ...grpc.CallOption) (*K8InstanceNewResponse, error) {
	out := new(K8InstanceNewResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceNew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8InstanceStoreClient) K8InstanceGet(ctx context.Context, in *K8InstanceRequest, opts ...grpc.CallOption) (*K8InstanceResponse, error) {
	out := new(K8InstanceResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8InstanceStoreClient) K8InstanceDelete(ctx context.Context, in *K8InstanceDeleteRequest, opts ...grpc.CallOption) (*K8InstanceDeleteResponse, error) {
	out := new(K8InstanceDeleteResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8InstanceStoreClient) K8InstanceUpdate(ctx context.Context, in *K8InstanceUpdateRequest, opts ...grpc.CallOption) (*K8InstanceUpdateResponse, error) {
	out := new(K8InstanceUpdateResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *k8InstanceStoreClient) K8InstanceUpdateTKMState(ctx context.Context, in *K8InstanceUpdateTKMStateRequest, opts ...grpc.CallOption) (*K8InstanceUpdateTKMStateResponse, error) {
	out := new(K8InstanceUpdateTKMStateResponse)
	err := grpc.Invoke(ctx, "/types.K8InstanceStore/K8InstanceUpdateTKMState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for K8InstanceStore service

type K8InstanceStoreServer interface {
	K8InstanceList(context.Context, *K8InstanceListRequest) (*K8InstanceListResponse, error)
	K8InstanceNew(context.Context, *K8InstanceNewRequest) (*K8InstanceNewResponse, error)
	K8InstanceGet(context.Context, *K8InstanceRequest) (*K8InstanceResponse, error)
	K8InstanceDelete(context.Context, *K8InstanceDeleteRequest) (*K8InstanceDeleteResponse, error)
	K8InstanceUpdate(context.Context, *K8InstanceUpdateRequest) (*K8InstanceUpdateResponse, error)
	K8InstanceUpdateTKMState(context.Context, *K8InstanceUpdateTKMStateRequest) (*K8InstanceUpdateTKMStateResponse, error)
}

func RegisterK8InstanceStoreServer(s *grpc.Server, srv K8InstanceStoreServer) {
	s.RegisterService(&_K8InstanceStore_serviceDesc, srv)
}

func _K8InstanceStore_K8InstanceList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceList(ctx, req.(*K8InstanceListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8InstanceStore_K8InstanceNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceNewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceNew(ctx, req.(*K8InstanceNewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8InstanceStore_K8InstanceGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceGet(ctx, req.(*K8InstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8InstanceStore_K8InstanceDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceDelete(ctx, req.(*K8InstanceDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8InstanceStore_K8InstanceUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceUpdate(ctx, req.(*K8InstanceUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _K8InstanceStore_K8InstanceUpdateTKMState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(K8InstanceUpdateTKMStateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(K8InstanceStoreServer).K8InstanceUpdateTKMState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/types.K8InstanceStore/K8InstanceUpdateTKMState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(K8InstanceStoreServer).K8InstanceUpdateTKMState(ctx, req.(*K8InstanceUpdateTKMStateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _K8InstanceStore_serviceDesc = grpc.ServiceDesc{
	ServiceName: "types.K8InstanceStore",
	HandlerType: (*K8InstanceStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "K8InstanceList",
			Handler:    _K8InstanceStore_K8InstanceList_Handler,
		},
		{
			MethodName: "K8InstanceNew",
			Handler:    _K8InstanceStore_K8InstanceNew_Handler,
		},
		{
			MethodName: "K8InstanceGet",
			Handler:    _K8InstanceStore_K8InstanceGet_Handler,
		},
		{
			MethodName: "K8InstanceDelete",
			Handler:    _K8InstanceStore_K8InstanceDelete_Handler,
		},
		{
			MethodName: "K8InstanceUpdate",
			Handler:    _K8InstanceStore_K8InstanceUpdate_Handler,
		},
		{
			MethodName: "K8InstanceUpdateTKMState",
			Handler:    _K8InstanceStore_K8InstanceUpdateTKMState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "k8instance.proto",
}

func init() { proto.RegisterFile("k8instance.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1867 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x58, 0xef, 0x6e, 0xdb, 0xc8,
	0x11, 0x3f, 0x4a, 0xb2, 0x2d, 0x8d, 0x62, 0x59, 0xde, 0xc8, 0x0e, 0xa3, 0xb8, 0xb6, 0xca, 0x0b,
	0x7a, 0x6a, 0x7a, 0x95, 0x11, 0xe7, 0x70, 0x35, 0xee, 0x3e, 0x39, 0x96, 0xed, 0x28, 0x8a, 0x7d,
	0x02, 0xa5, 0xb4, 0xc0, 0x01, 0x45, 0x4a, 0x91, 0x6b, 0x99, 0x10, 0xb5, 0xab, 0x92, 0xab, 0xa4,
	0xea, 0x1b, 0xf4, 0x43, 0x9f, 0xa6, 0x1f, 0xda, 0x07, 0x28, 0xfa, 0x08, 0x7d, 0x80, 0x3e, 0x48,
	0x5b, 0xec, 0x2e, 0x49, 0xf1, 0xaf, 0xed, 0x4b, 0x0e, 0x28, 0xfa, 0xc1, 0x06, 0x77, 0x66, 0x76,
	0x76, 0xf7, 0x37, 0xb3, 0xbf, 0x99, 0x15, 0xd4, 0xa7, 0xc7, 0x36, 0xf1, 0x98, 0x41, 0x4c, 0xdc,
	0x99, 0xbb, 0x94, 0x51, 0xb4, 0xc6, 0x96, 0x73, 0xec, 0x35, 0x61, 0x3c, 0x33, 0x3d, 0x29, 0x6a,
	0x6e, 0x3b, 0xb6, 0xc7, 0xe8, 0x9c, 0xd9, 0x94, 0x84, 0x22, 0x86, 0x89, 0x41, 0x98, 0x31, 0xc1,
	0x84, 0xf9, 0xa2, 0x06, 0xc1, 0xec, 0x03, 0x75, 0xa7, 0x26, 0x25, 0xd7, 0xf6, 0x24, 0x36, 0xd7,
	0x3b, 0x14, 0xff, 0x7d, 0xd1, 0xc1, 0x84, 0xd2, 0x89, 0x83, 0x0f, 0xc5, 0x68, 0xbc, 0xb8, 0x3e,
	0x64, 0xf6, 0x0c, 0x7b, 0xcc, 0x98, 0xcd, 0xa5, 0x81, 0xf6, 0xaf, 0x0a, 0x40, 0xff, 0xb8, 0xe7,
	0xef, 0x0b, 0xd5, 0xa0, 0xd0, 0xeb, 0xaa, 0x85, 0x96, 0xd2, 0xae, 0xe8, 0x85, 0x5e, 0x17, 0xed,
	0xc2, 0x7a, 0xff, 0xf8, 0xc4, 0xb2, 0x5c, 0xb5, 0x24, 0x64, 0xfe, 0x08, 0xfd, 0x02, 0xca, 0xa3,
	0xfe, 0xe5, 0x90, 0x19, 0x0c, 0xab, 0x8d, 0x96, 0xd2, 0xae, 0x1d, 0x6d, 0x75, 0xc4, 0x61, 0x3a,
	0x81, 0x58, 0x0f, 0x0d, 0x50, 0x1b, 0xb6, 0x82, 0xef, 0x2e, 0x66, 0x86, 0xed, 0x78, 0xea, 0x8e,
	0xf0, 0x96, 0x14, 0xa3, 0x06, 0xac, 0x9d, 0x3a, 0x74, 0x61, 0xa9, 0xeb, 0x42, 0x2f, 0x07, 0x7c,
	0x13, 0x6f, 0x5e, 0x8e, 0x96, 0x73, 0xac, 0x6e, 0xc8, 0x4d, 0xc8, 0x11, 0x6a, 0x41, 0xf5, 0x6c,
	0x74, 0xda, 0xe5, 0x1b, 0xc2, 0x9e, 0xa7, 0x82, 0x50, 0x46, 0x45, 0xa8, 0x0e, 0xc5, 0x33, 0xd7,
	0x55, 0xab, 0x42, 0xc3, 0x3f, 0x11, 0x82, 0xd2, 0x95, 0x31, 0xc3, 0xea, 0x96, 0x10, 0x89, 0x6f,
	0xb4, 0x07, 0x95, 0xfe, 0xf1, 0xaf, 0xb1, 0xeb, 0xd9, 0x94, 0xa8, 0xdb, 0x42, 0xb1, 0x12, 0xa0,
	0x23, 0x68, 0x9c, 0xbc, 0x37, 0x6c, 0xc7, 0x18, 0x3b, 0xb8, 0x7f, 0x3c, 0x7c, 0x3b, 0x9f, 0xb8,
	0x86, 0x85, 0x3d, 0x15, 0xb5, 0x8a, 0xed, 0x8a, 0x9e, 0xa9, 0x43, 0xdf, 0x42, 0xf9, 0x12, 0x33,
	0xc3, 0x32, 0x98, 0xa1, 0x3e, 0x6c, 0x15, 0xdb, 0xd5, 0xa3, 0x03, 0x1f, 0x9e, 0x15, 0xd6, 0x9d,
	0xc0, 0xe2, 0x8c, 0x30, 0x77, 0xa9, 0x87, 0x13, 0xd0, 0x31, 0x54, 0xba, 0xd8, 0xc1, 0x0c, 0x5b,
	0x27, 0x4c, 0xdd, 0x6d, 0x29, 0xed, 0xea, 0x51, 0xb3, 0x23, 0xe3, 0xd8, 0x09, 0xe2, 0xd8, 0x19,
	0x05, 0x71, 0xd4, 0x57, 0xc6, 0xe8, 0x6b, 0xd8, 0x3d, 0x21, 0x9e, 0x3d, 0x76, 0xf0, 0xc0, 0x31,
	0x96, 0x63, 0x4a, 0xa7, 0xc1, 0xa9, 0x1e, 0x89, 0x53, 0xe5, 0x68, 0xd1, 0x53, 0xd8, 0x3c, 0xa5,
	0xb3, 0xb9, 0xe1, 0xb2, 0x19, 0x26, 0xac, 0xd7, 0x55, 0x55, 0x61, 0x1e, 0x17, 0xa2, 0x6f, 0x60,
	0xf3, 0x4a, 0xa6, 0xdd, 0xa9, 0x48, 0x3b, 0xf5, 0xb1, 0xd8, 0x5b, 0xc3, 0x3f, 0x59, 0x4c, 0xa7,
	0xc7, 0x4d, 0x39, 0xc4, 0x23, 0x9e, 0xc5, 0xe6, 0xb2, 0xd7, 0x55, 0x9b, 0x12, 0xe2, 0x50, 0x80,
	0x2e, 0xa0, 0x26, 0x50, 0x71, 0x9c, 0xef, 0x64, 0xe6, 0xab, 0x4f, 0x84, 0xeb, 0x34, 0x68, 0x71,
	0x33, 0x3d, 0x31, 0x8d, 0x43, 0x77, 0xea, 0x62, 0x43, 0x42, 0xb7, 0x77, 0x37, 0x74, 0xa1, 0x31,
	0xcf, 0x8b, 0xb3, 0x91, 0x31, 0x51, 0xf7, 0x65, 0x5e, 0xf0, 0x6f, 0x34, 0x84, 0x7a, 0x8f, 0x30,
	0xec, 0x12, 0xc3, 0x09, 0xa3, 0x79, 0x20, 0xa2, 0xf9, 0x45, 0x3a, 0x9a, 0x49, 0x4b, 0x19, 0xd5,
	0x94, 0x03, 0xd4, 0x84, 0x72, 0xff, 0x72, 0xd8, 0xc7, 0x1c, 0x88, 0x96, 0x58, 0x2c, 0x1c, 0x73,
	0xdd, 0x60, 0x31, 0x76, 0x6c, 0xb3, 0x37, 0x50, 0x7f, 0x2a, 0x75, 0xc1, 0x98, 0x23, 0x38, 0x70,
	0xed, 0xf7, 0x06, 0xc3, 0xbd, 0x81, 0xaa, 0x49, 0x04, 0x43, 0x01, 0xd2, 0x61, 0xe7, 0xd4, 0x59,
	0x78, 0x0c, 0xbb, 0x67, 0xc4, 0x9a, 0x53, 0x9b, 0x30, 0x3f, 0x46, 0x9f, 0x0b, 0x10, 0xf6, 0xfc,
	0xfd, 0x66, 0xda, 0xe8, 0xd9, 0x53, 0xd1, 0x39, 0x6c, 0xf7, 0x66, 0xc6, 0x04, 0x0f, 0xa8, 0x63,
	0x9b, 0x4b, 0xdf, 0xdf, 0x53, 0xe1, 0x4f, 0xf5, 0xfd, 0xa5, 0xf4, 0x7a, 0x7a, 0x4a, 0xf3, 0x5b,
	0xd8, 0x8c, 0x81, 0xc2, 0x6f, 0xe5, 0x14, 0x2f, 0x55, 0x45, 0xde, 0xca, 0x29, 0x5e, 0xf2, 0x7b,
	0xff, 0xde, 0x70, 0x16, 0xd8, 0x67, 0x1e, 0x39, 0xf8, 0xa6, 0x70, 0xac, 0x34, 0x4f, 0x61, 0x27,
	0x13, 0xd9, 0x1f, 0xe2, 0x44, 0x5b, 0xe6, 0xa0, 0xc3, 0x01, 0x1f, 0x2e, 0xc6, 0x04, 0xf3, 0x9c,
	0x97, 0x9e, 0xc2, 0x31, 0x67, 0x9d, 0xab, 0xe1, 0x45, 0xaf, 0xeb, 0xa9, 0x05, 0x71, 0xd3, 0xfd,
	0x11, 0xfa, 0x12, 0xb6, 0x7b, 0x5e, 0x10, 0x96, 0x33, 0xc2, 0xaf, 0xbe, 0xa5, 0x16, 0x5b, 0x4a,
	0xbb, 0xac, 0xa7, 0x15, 0xda, 0x3c, 0x03, 0x44, 0x4e, 0x88, 0x3d, 0x4f, 0x4a, 0x02, 0x07, 0x8a,
	0x70, 0x90, 0x14, 0xa3, 0xe7, 0x00, 0x7d, 0xbc, 0x0c, 0x58, 0xb3, 0x20, 0x92, 0x6f, 0x3b, 0x48,
	0xbe, 0x50, 0xa1, 0x47, 0x8c, 0xb4, 0x76, 0x74, 0x0a, 0x3f, 0xe1, 0x74, 0xe6, 0xf1, 0xf4, 0xb2,
	0x82, 0x13, 0x06, 0x63, 0xed, 0x1c, 0xb6, 0x57, 0x09, 0xac, 0xe3, 0xdf, 0x2f, 0xb0, 0xc7, 0xc4,
	0x8a, 0xa1, 0x50, 0x4c, 0x89, 0xac, 0xb8, 0xb2, 0x8e, 0x18, 0x69, 0x17, 0x80, 0xa2, 0x7e, 0xbc,
	0x39, 0x25, 0x1e, 0xfe, 0x18, 0x47, 0xff, 0xd9, 0x80, 0xc6, 0x6a, 0x78, 0x85, 0x3f, 0x04, 0x9b,
	0x0a, 0xeb, 0x42, 0x21, 0xbb, 0x2e, 0x14, 0x63, 0x75, 0x21, 0xe0, 0xf8, 0x4a, 0x1e, 0xc7, 0x57,
	0x93, 0x1c, 0x7f, 0x16, 0xe1, 0xeb, 0x07, 0x02, 0xe4, 0x9f, 0xa7, 0x76, 0xba, 0xda, 0x4e, 0x2e,
	0x73, 0xa7, 0x78, 0xb4, 0x76, 0x2f, 0x1e, 0xdd, 0xfa, 0x48, 0x1e, 0xad, 0x27, 0x79, 0x74, 0x1f,
	0x40, 0xc7, 0x13, 0x9b, 0x12, 0x71, 0x7c, 0x59, 0xc9, 0x22, 0x12, 0x3e, 0x5b, 0x8e, 0xfa, 0x78,
	0xa9, 0x22, 0x39, 0x3b, 0x14, 0x64, 0xb0, 0xf0, 0xc3, 0x8f, 0x63, 0xe1, 0xdf, 0x66, 0xf0, 0x66,
	0x43, 0xa0, 0xfa, 0xfc, 0x36, 0x54, 0xef, 0xcb, 0xa0, 0xf9, 0x55, 0x6e, 0xe7, 0xd6, 0x2a, 0x17,
	0x65, 0xde, 0xdd, 0x04, 0xf3, 0xde, 0xc0, 0xe3, 0x13, 0x6b, 0x66, 0x7b, 0xdc, 0xf0, 0x94, 0x12,
	0xe6, 0x52, 0xc7, 0xc1, 0xae, 0x1f, 0x9f, 0x47, 0x02, 0x86, 0x67, 0xa9, 0xbd, 0xe7, 0xce, 0xd0,
	0xf3, 0x9d, 0xe5, 0x33, 0xb5, 0xfa, 0x23, 0x33, 0xf5, 0xe3, 0xff, 0x47, 0xa6, 0xfe, 0x9b, 0x02,
	0x6a, 0x5e, 0x9e, 0xf1, 0xf4, 0x7d, 0x65, 0x78, 0x23, 0x9b, 0xa3, 0xe9, 0x13, 0xe6, 0x4a, 0xc0,
	0xd3, 0xe2, 0x95, 0xe1, 0xf5, 0x17, 0x63, 0xec, 0x12, 0xcc, 0xb0, 0xd7, 0x35, 0xbc, 0x9b, 0x31,
	0x35, 0x5c, 0x49, 0x1a, 0x65, 0x3d, 0x47, 0xcb, 0xc1, 0x1b, 0x50, 0x6b, 0x88, 0xcd, 0x85, 0x6b,
	0xb3, 0xa5, 0xc4, 0x43, 0x10, 0x4a, 0x2d, 0x04, 0x2f, 0xa5, 0xd7, 0xd3, 0x53, 0xb4, 0x77, 0xf0,
	0xf9, 0x3d, 0x52, 0x03, 0x1d, 0xc3, 0x23, 0x2c, 0xc8, 0x3d, 0xbd, 0xa8, 0x3c, 0x52, 0x9e, 0x5a,
	0xfb, 0x87, 0x02, 0x4f, 0x22, 0xd7, 0xe6, 0x35, 0x1d, 0x9f, 0xdb, 0xc4, 0xf6, 0x6e, 0x06, 0xc6,
	0xd2, 0xa1, 0x86, 0x15, 0xe9, 0xd5, 0x95, 0x58, 0xaf, 0x9e, 0x68, 0x93, 0x4b, 0xe9, 0x36, 0x39,
	0xda, 0xcd, 0x3f, 0xb8, 0xab, 0x9b, 0x47, 0x50, 0x7a, 0x43, 0x27, 0x9e, 0xdf, 0xa2, 0x8b, 0xef,
	0x15, 0x3f, 0x97, 0xb3, 0xf9, 0xb9, 0x12, 0xe5, 0x67, 0xad, 0x0f, 0x3b, 0x09, 0x02, 0xf0, 0x4b,
	0x46, 0x03, 0xd6, 0x5e, 0xd3, 0x71, 0x58, 0x8b, 0xe5, 0x80, 0x87, 0xdd, 0x4f, 0xfb, 0xf0, 0x69,
	0xb2, 0x12, 0x68, 0xff, 0x2c, 0x46, 0xbd, 0xbd, 0xb1, 0x3d, 0x16, 0x14, 0x8d, 0x0b, 0xd8, 0xbd,
	0x34, 0xb8, 0x95, 0x27, 0x36, 0x7e, 0xf6, 0x07, 0xd3, 0x59, 0x78, 0x82, 0xd7, 0x78, 0x1d, 0xcd,
	0x38, 0x63, 0x8e, 0x39, 0xfa, 0x0a, 0xaa, 0xdc, 0x6f, 0xc0, 0x8a, 0x45, 0x71, 0xb1, 0x90, 0x3f,
	0x3b, 0xa2, 0xd1, 0xa3, 0x66, 0x71, 0xaa, 0x2e, 0x25, 0xa9, 0x3a, 0x55, 0x2a, 0xd6, 0xb2, 0x4a,
	0x45, 0x1b, 0x36, 0xbe, 0x73, 0x2d, 0xec, 0xbe, 0x5c, 0xaa, 0xeb, 0x82, 0x40, 0x6b, 0x1d, 0xf9,
	0xba, 0xf3, 0xa5, 0x7a, 0xa0, 0x46, 0xbf, 0x82, 0xda, 0x1b, 0xfb, 0x1a, 0x9b, 0x4b, 0xd3, 0xc1,
	0x32, 0x90, 0x1b, 0xd9, 0x87, 0x4c, 0x98, 0x85, 0xc5, 0xb2, 0x1c, 0x29, 0x96, 0xe7, 0x91, 0x72,
	0x58, 0x11, 0xeb, 0xa6, 0xc9, 0x2f, 0x82, 0x74, 0x5e, 0x3d, 0xfc, 0x24, 0x3e, 0xd1, 0xfe, 0xac,
	0xc0, 0x6e, 0x72, 0x39, 0x3f, 0x4f, 0x5e, 0x40, 0x75, 0xa5, 0xf1, 0x54, 0x25, 0xde, 0x16, 0xad,
	0x7a, 0x8b, 0xa8, 0x15, 0x5f, 0x69, 0x44, 0x99, 0xe1, 0x88, 0x95, 0xd6, 0x74, 0x39, 0xe0, 0xad,
	0xd8, 0xdc, 0x98, 0xd8, 0xc4, 0xe0, 0x41, 0x1b, 0xd1, 0x29, 0x26, 0x7e, 0x33, 0x91, 0x14, 0x6b,
	0x7f, 0x57, 0xe0, 0xd1, 0xca, 0x9f, 0x7c, 0x74, 0x05, 0xa9, 0x96, 0x7c, 0x36, 0xbf, 0x8a, 0x00,
	0x58, 0x14, 0xbb, 0xfb, 0x32, 0xb5, 0xbb, 0x98, 0x87, 0xdc, 0x96, 0x22, 0x78, 0x97, 0x94, 0x56,
	0xef, 0x92, 0x4f, 0x83, 0xf5, 0x2a, 0x4a, 0xb0, 0xc1, 0x1e, 0x3e, 0xe1, 0xfe, 0xb5, 0x60, 0x3f,
	0xee, 0x2d, 0xc9, 0x4b, 0xda, 0x5f, 0x95, 0x95, 0xc9, 0xdb, 0xb9, 0x65, 0xa4, 0x4d, 0x62, 0x04,
	0x54, 0xb8, 0x8b, 0x80, 0xf6, 0x79, 0x63, 0x39, 0x0c, 0x6a, 0xbe, 0x8c, 0x56, 0x44, 0x92, 0xf5,
	0x73, 0x43, 0x29, 0xfb, 0xe7, 0x86, 0x7d, 0x80, 0x51, 0xff, 0x37, 0x81, 0x27, 0x79, 0x03, 0x23,
	0x12, 0xed, 0x29, 0x68, 0xa9, 0xb3, 0xe9, 0xd8, 0x33, 0x6f, 0xb0, 0xb5, 0x70, 0x70, 0x70, 0xbe,
	0x7f, 0xaf, 0x45, 0x13, 0x43, 0x9e, 0x30, 0x48, 0x8c, 0x18, 0x76, 0x4a, 0x02, 0x3b, 0xf4, 0x3d,
	0xd4, 0x4e, 0xae, 0xaf, 0xb1, 0xc9, 0xb0, 0x75, 0x6e, 0x63, 0xc7, 0x0a, 0x3a, 0xfc, 0xa3, 0x54,
	0xb2, 0xc4, 0xbc, 0x76, 0xe2, 0x93, 0x64, 0xca, 0x24, 0x3c, 0xdd, 0x2b, 0x05, 0xe3, 0x5e, 0x6f,
	0x49, 0x41, 0xc1, 0x10, 0xa5, 0x08, 0x43, 0xc4, 0x63, 0xb0, 0x96, 0x8a, 0x41, 0x90, 0xb6, 0xeb,
	0x91, 0xe7, 0xf4, 0xef, 0x32, 0xda, 0xc2, 0x0d, 0xb1, 0xb3, 0xaf, 0xee, 0xd8, 0xd9, 0x7d, 0x3b,
	0xc3, 0x5b, 0xbb, 0xb8, 0xf2, 0x8f, 0xd9, 0xc5, 0x65, 0x76, 0x5c, 0x95, 0x1f, 0xde, 0x71, 0x9d,
	0xc0, 0xc3, 0x8c, 0x60, 0xde, 0x75, 0xa1, 0xcb, 0xd1, 0xbe, 0xeb, 0x7f, 0xdf, 0xb4, 0xc5, 0x28,
	0x25, 0x88, 0x9c, 0x4f, 0x29, 0xb7, 0x5f, 0x80, 0x90, 0x70, 0x0a, 0x11, 0xc2, 0xd1, 0xde, 0xc1,
	0x41, 0xd2, 0x5f, 0x48, 0x03, 0xf7, 0xba, 0x57, 0xf1, 0xec, 0x2c, 0x24, 0xb3, 0x53, 0xd3, 0xa0,
	0x95, 0xbf, 0x80, 0xdc, 0xf8, 0xb3, 0xaf, 0x33, 0xda, 0x42, 0xf4, 0x00, 0xca, 0x5d, 0xdb, 0x13,
	0x4f, 0xf3, 0xfa, 0x67, 0xe8, 0x21, 0x6c, 0xf9, 0xef, 0xf4, 0x2b, 0x2a, 0x0d, 0xea, 0xca, 0xb3,
	0xbf, 0x28, 0x2b, 0x2e, 0x43, 0x75, 0x78, 0xd0, 0x23, 0x36, 0xb3, 0x0d, 0xc7, 0xfe, 0xa3, 0x4d,
	0x26, 0xf5, 0xcf, 0x50, 0x15, 0x36, 0xf4, 0x05, 0x21, 0x7c, 0xa0, 0xa0, 0x4d, 0xa8, 0x0c, 0x17,
	0xa6, 0x89, 0xb1, 0x85, 0xad, 0x7a, 0x01, 0x01, 0xac, 0x9f, 0x1b, 0x36, 0xf7, 0x5d, 0xe4, 0x76,
	0x6f, 0xc9, 0x94, 0xd0, 0x0f, 0xa4, 0x5e, 0x42, 0x5b, 0x50, 0x1d, 0x61, 0x77, 0x26, 0xca, 0x11,
	0x99, 0xd4, 0xd7, 0x50, 0x0d, 0x20, 0x10, 0x60, 0xab, 0xbe, 0x8e, 0x10, 0xd4, 0xc4, 0x31, 0x6c,
	0x32, 0x79, 0x37, 0xa0, 0xd4, 0xf1, 0xea, 0x1b, 0xa8, 0x01, 0xf5, 0x50, 0xe6, 0x37, 0x36, 0xf5,
	0x32, 0xda, 0x81, 0x6d, 0xf9, 0x2b, 0x65, 0x54, 0x5c, 0x39, 0xfa, 0x53, 0x09, 0xb6, 0x56, 0x90,
	0x0c, 0x19, 0x75, 0x31, 0xba, 0x84, 0x5a, 0xbc, 0xfe, 0xa2, 0xbd, 0xdb, 0xba, 0x80, 0xe6, 0x4f,
	0x72, 0xb4, 0x7e, 0x26, 0xbc, 0x86, 0xcd, 0x58, 0xd7, 0x87, 0x9e, 0xdc, 0xf2, 0x18, 0x6c, 0xee,
	0x65, 0x2b, 0x7d, 0x5f, 0xdd, 0xa8, 0xaf, 0x0b, 0xcc, 0x90, 0x9a, 0x2e, 0xfe, 0xbe, 0xa3, 0xc7,
	0x19, 0x1a, 0xdf, 0xcb, 0x10, 0xea, 0xc9, 0x52, 0x88, 0xf6, 0x6f, 0xaf, 0xd3, 0xcd, 0x83, 0x5c,
	0x7d, 0x96, 0x53, 0x99, 0x5b, 0x19, 0x4e, 0x63, 0xfc, 0x96, 0xe1, 0x34, 0x71, 0x8b, 0xa6, 0xe9,
	0x1b, 0x16, 0xe6, 0xd8, 0xcf, 0x72, 0x26, 0x27, 0xae, 0x4c, 0xf3, 0x8b, 0x3b, 0xed, 0xe4, 0x62,
	0x2f, 0x5f, 0x7c, 0xff, 0x7c, 0x6c, 0xb3, 0xf1, 0xc2, 0x9c, 0x62, 0xd6, 0xa1, 0xa6, 0xdd, 0xa1,
	0xae, 0x61, 0x3a, 0xd8, 0xa4, 0xee, 0xbc, 0x63, 0xd2, 0xd9, 0x21, 0x9d, 0x62, 0xfe, 0xf7, 0x4b,
	0x93, 0xce, 0x66, 0x94, 0x1c, 0x0a, 0xaf, 0xe3, 0x75, 0xf1, 0xf3, 0xea, 0x8b, 0xff, 0x06, 0x00,
	0x00, 0xff, 0xff, 0xfd, 0x74, 0x34, 0xd5, 0xe5, 0x18, 0x00, 0x00,
}
