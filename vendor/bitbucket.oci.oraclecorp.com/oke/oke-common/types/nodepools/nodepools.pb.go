// Code generated by protoc-gen-go. DO NOT EDIT.
// source: nodepools/nodepools.proto

/*
Package nodepools is a generated protocol buffer package.

It is generated from these files:
	nodepools/nodepools.proto

It has these top-level messages:
	NodePool
	SubnetInfo
	NewRequest
	NewResponse
	GetRequest
	ListOptions
	GetResponse
	UpdateJobFinishPayload
	UpdateRequest
	UpdateResponse
	DeleteJobFinishPayload
	DeleteRequest
	DeleteResponse
	UpdateNodeStatesRequest
	NodePoolState
	UpdateNodeStatesResponse
*/
package nodepools

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"
import google_protobuf1 "github.com/golang/protobuf/ptypes/wrappers"
import nodes "bitbucket.oci.oraclecorp.com/oke/oke-common/types/nodes"
import lists "bitbucket.oci.oraclecorp.com/oke/oke-common/types/lists"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type State int32

const (
	State_DELETED  State = 0
	State_CREATING State = 1
	State_ACTIVE   State = 2
	State_UPDATING State = 3
	State_DELETING State = 4
	State_FAILING  State = 5
	State_DEGRADED State = 6
	State_FAILED   State = 7
	State_INACTIVE State = 8
)

var State_name = map[int32]string{
	0: "DELETED",
	1: "CREATING",
	2: "ACTIVE",
	3: "UPDATING",
	4: "DELETING",
	5: "FAILING",
	6: "DEGRADED",
	7: "FAILED",
	8: "INACTIVE",
}
var State_value = map[string]int32{
	"DELETED":  0,
	"CREATING": 1,
	"ACTIVE":   2,
	"UPDATING": 3,
	"DELETING": 4,
	"FAILING":  5,
	"DEGRADED": 6,
	"FAILED":   7,
	"INACTIVE": 8,
}

func (x State) String() string {
	return proto.EnumName(State_name, int32(x))
}
func (State) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NodePool struct {
	ID                      string                        `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	ClusterID               string                        `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
	CompartmentID           string                        `protobuf:"bytes,3,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	TenancyID               string                        `protobuf:"bytes,4,opt,name=TenancyID" json:"TenancyID,omitempty"`
	Name                    string                        `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	K8SVersion              string                        `protobuf:"bytes,6,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	NodeImageID             string                        `protobuf:"bytes,7,opt,name=NodeImageID" json:"NodeImageID,omitempty"`
	NodeImageName           string                        `protobuf:"bytes,8,opt,name=NodeImageName" json:"NodeImageName,omitempty"`
	NodeShape               string                        `protobuf:"bytes,9,opt,name=NodeShape" json:"NodeShape,omitempty"`
	InitialNodeLabels       string                        `protobuf:"bytes,10,opt,name=InitialNodeLabels" json:"InitialNodeLabels,omitempty"`
	SSHPublicKey            string                        `protobuf:"bytes,11,opt,name=SSHPublicKey" json:"SSHPublicKey,omitempty"`
	QuantityPerSubnet       uint32                        `protobuf:"varint,12,opt,name=QuantityPerSubnet" json:"QuantityPerSubnet,omitempty"`
	SubnetsInfo             map[string]*SubnetInfo        `protobuf:"bytes,13,rep,name=SubnetsInfo" json:"SubnetsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	CreatedAt               *google_protobuf.Timestamp    `protobuf:"bytes,14,opt,name=CreatedAt" json:"CreatedAt,omitempty"`
	DeletedAt               *google_protobuf.Timestamp    `protobuf:"bytes,15,opt,name=DeletedAt" json:"DeletedAt,omitempty"`
	State                   State                         `protobuf:"varint,16,opt,name=State,enum=nodepools.State" json:"State,omitempty"`
	StateDetails            string                        `protobuf:"bytes,17,opt,name=StateDetails" json:"StateDetails,omitempty"`
	NodeStates              []*nodes.NodeState            `protobuf:"bytes,18,rep,name=NodeStates" json:"NodeStates,omitempty"`
	ETag                    string                        `protobuf:"bytes,19,opt,name=ETag" json:"ETag,omitempty"`
	NodeMetadata            map[string]string             `protobuf:"bytes,20,rep,name=NodeMetadata" json:"NodeMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Size                    uint32                        `protobuf:"varint,21,opt,name=Size" json:"Size,omitempty"`
	NodeBootVolumeSizeInGBs *google_protobuf1.UInt32Value `protobuf:"bytes,22,opt,name=NodeBootVolumeSizeInGBs" json:"NodeBootVolumeSizeInGBs,omitempty"`
}

func (m *NodePool) Reset()                    { *m = NodePool{} }
func (m *NodePool) String() string            { return proto.CompactTextString(m) }
func (*NodePool) ProtoMessage()               {}
func (*NodePool) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodePool) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NodePool) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *NodePool) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *NodePool) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *NodePool) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NodePool) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *NodePool) GetNodeImageID() string {
	if m != nil {
		return m.NodeImageID
	}
	return ""
}

func (m *NodePool) GetNodeImageName() string {
	if m != nil {
		return m.NodeImageName
	}
	return ""
}

func (m *NodePool) GetNodeShape() string {
	if m != nil {
		return m.NodeShape
	}
	return ""
}

func (m *NodePool) GetInitialNodeLabels() string {
	if m != nil {
		return m.InitialNodeLabels
	}
	return ""
}

func (m *NodePool) GetSSHPublicKey() string {
	if m != nil {
		return m.SSHPublicKey
	}
	return ""
}

func (m *NodePool) GetQuantityPerSubnet() uint32 {
	if m != nil {
		return m.QuantityPerSubnet
	}
	return 0
}

func (m *NodePool) GetSubnetsInfo() map[string]*SubnetInfo {
	if m != nil {
		return m.SubnetsInfo
	}
	return nil
}

func (m *NodePool) GetCreatedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.CreatedAt
	}
	return nil
}

func (m *NodePool) GetDeletedAt() *google_protobuf.Timestamp {
	if m != nil {
		return m.DeletedAt
	}
	return nil
}

func (m *NodePool) GetState() State {
	if m != nil {
		return m.State
	}
	return State_DELETED
}

func (m *NodePool) GetStateDetails() string {
	if m != nil {
		return m.StateDetails
	}
	return ""
}

func (m *NodePool) GetNodeStates() []*nodes.NodeState {
	if m != nil {
		return m.NodeStates
	}
	return nil
}

func (m *NodePool) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *NodePool) GetNodeMetadata() map[string]string {
	if m != nil {
		return m.NodeMetadata
	}
	return nil
}

func (m *NodePool) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *NodePool) GetNodeBootVolumeSizeInGBs() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.NodeBootVolumeSizeInGBs
	}
	return nil
}

type SubnetInfo struct {
	ID                     string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	AD                     string `protobuf:"bytes,2,opt,name=AD" json:"AD,omitempty"`
	ProhibitPublicIpOnVnic bool   `protobuf:"varint,3,opt,name=ProhibitPublicIpOnVnic" json:"ProhibitPublicIpOnVnic,omitempty"`
}

func (m *SubnetInfo) Reset()                    { *m = SubnetInfo{} }
func (m *SubnetInfo) String() string            { return proto.CompactTextString(m) }
func (*SubnetInfo) ProtoMessage()               {}
func (*SubnetInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SubnetInfo) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *SubnetInfo) GetAD() string {
	if m != nil {
		return m.AD
	}
	return ""
}

func (m *SubnetInfo) GetProhibitPublicIpOnVnic() bool {
	if m != nil {
		return m.ProhibitPublicIpOnVnic
	}
	return false
}

type NewRequest struct {
	ClusterID               string                        `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
	CompartmentID           string                        `protobuf:"bytes,3,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	TenancyID               string                        `protobuf:"bytes,4,opt,name=TenancyID" json:"TenancyID,omitempty"`
	Name                    string                        `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	K8SVersion              string                        `protobuf:"bytes,6,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	NodeImageID             string                        `protobuf:"bytes,7,opt,name=NodeImageID" json:"NodeImageID,omitempty"`
	NodeImageName           string                        `protobuf:"bytes,8,opt,name=NodeImageName" json:"NodeImageName,omitempty"`
	NodeShape               string                        `protobuf:"bytes,9,opt,name=NodeShape" json:"NodeShape,omitempty"`
	InitialNodeLabels       string                        `protobuf:"bytes,10,opt,name=InitialNodeLabels" json:"InitialNodeLabels,omitempty"`
	SSHPublicKey            string                        `protobuf:"bytes,11,opt,name=SSHPublicKey" json:"SSHPublicKey,omitempty"`
	QuantityPerSubnet       uint32                        `protobuf:"varint,12,opt,name=QuantityPerSubnet" json:"QuantityPerSubnet,omitempty"`
	SubnetsInfo             map[string]*SubnetInfo        `protobuf:"bytes,13,rep,name=SubnetsInfo" json:"SubnetsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	NodeMetadata            map[string]string             `protobuf:"bytes,14,rep,name=NodeMetadata" json:"NodeMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Size                    uint32                        `protobuf:"varint,15,opt,name=Size" json:"Size,omitempty"`
	NodeBootVolumeSizeInGBs *google_protobuf1.UInt32Value `protobuf:"bytes,16,opt,name=NodeBootVolumeSizeInGBs" json:"NodeBootVolumeSizeInGBs,omitempty"`
}

func (m *NewRequest) Reset()                    { *m = NewRequest{} }
func (m *NewRequest) String() string            { return proto.CompactTextString(m) }
func (*NewRequest) ProtoMessage()               {}
func (*NewRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NewRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *NewRequest) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *NewRequest) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *NewRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NewRequest) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *NewRequest) GetNodeImageID() string {
	if m != nil {
		return m.NodeImageID
	}
	return ""
}

func (m *NewRequest) GetNodeImageName() string {
	if m != nil {
		return m.NodeImageName
	}
	return ""
}

func (m *NewRequest) GetNodeShape() string {
	if m != nil {
		return m.NodeShape
	}
	return ""
}

func (m *NewRequest) GetInitialNodeLabels() string {
	if m != nil {
		return m.InitialNodeLabels
	}
	return ""
}

func (m *NewRequest) GetSSHPublicKey() string {
	if m != nil {
		return m.SSHPublicKey
	}
	return ""
}

func (m *NewRequest) GetQuantityPerSubnet() uint32 {
	if m != nil {
		return m.QuantityPerSubnet
	}
	return 0
}

func (m *NewRequest) GetSubnetsInfo() map[string]*SubnetInfo {
	if m != nil {
		return m.SubnetsInfo
	}
	return nil
}

func (m *NewRequest) GetNodeMetadata() map[string]string {
	if m != nil {
		return m.NodeMetadata
	}
	return nil
}

func (m *NewRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *NewRequest) GetNodeBootVolumeSizeInGBs() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.NodeBootVolumeSizeInGBs
	}
	return nil
}

type NewResponse struct {
	NodePool *NodePool `protobuf:"bytes,1,opt,name=NodePool" json:"NodePool,omitempty"`
	JobID    string    `protobuf:"bytes,2,opt,name=JobID" json:"JobID,omitempty"`
}

func (m *NewResponse) Reset()                    { *m = NewResponse{} }
func (m *NewResponse) String() string            { return proto.CompactTextString(m) }
func (*NewResponse) ProtoMessage()               {}
func (*NewResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *NewResponse) GetNodePool() *NodePool {
	if m != nil {
		return m.NodePool
	}
	return nil
}

func (m *NewResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

// GetRequest allows NodePools to be retrieved. The fields provided are
// filters to the returned list.
type GetRequest struct {
	ID             string           `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	ClusterID      string           `protobuf:"bytes,2,opt,name=ClusterID" json:"ClusterID,omitempty"`
	CompartmentID  string           `protobuf:"bytes,3,opt,name=CompartmentID" json:"CompartmentID,omitempty"`
	TenancyID      string           `protobuf:"bytes,4,opt,name=TenancyID" json:"TenancyID,omitempty"`
	Name           string           `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	States         []State          `protobuf:"varint,6,rep,packed,name=States,enum=nodepools.State" json:"States,omitempty"`
	ListOptions    *ListOptions     `protobuf:"bytes,7,opt,name=ListOptions" json:"ListOptions,omitempty"`
	OrderBy        []*lists.OrderBy `protobuf:"bytes,8,rep,name=OrderBy" json:"OrderBy,omitempty"`
	ExcludedStates []State          `protobuf:"varint,9,rep,packed,name=ExcludedStates,enum=nodepools.State" json:"ExcludedStates,omitempty"`
}

func (m *GetRequest) Reset()                    { *m = GetRequest{} }
func (m *GetRequest) String() string            { return proto.CompactTextString(m) }
func (*GetRequest) ProtoMessage()               {}
func (*GetRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *GetRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *GetRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *GetRequest) GetCompartmentID() string {
	if m != nil {
		return m.CompartmentID
	}
	return ""
}

func (m *GetRequest) GetTenancyID() string {
	if m != nil {
		return m.TenancyID
	}
	return ""
}

func (m *GetRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *GetRequest) GetStates() []State {
	if m != nil {
		return m.States
	}
	return nil
}

func (m *GetRequest) GetListOptions() *ListOptions {
	if m != nil {
		return m.ListOptions
	}
	return nil
}

func (m *GetRequest) GetOrderBy() []*lists.OrderBy {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *GetRequest) GetExcludedStates() []State {
	if m != nil {
		return m.ExcludedStates
	}
	return nil
}

type ListOptions struct {
	Limit           int32  `protobuf:"varint,1,opt,name=Limit" json:"Limit,omitempty"`
	Offset          int32  `protobuf:"varint,2,opt,name=Offset" json:"Offset,omitempty"`
	PaginationToken string `protobuf:"bytes,3,opt,name=PaginationToken" json:"PaginationToken,omitempty"`
}

func (m *ListOptions) Reset()                    { *m = ListOptions{} }
func (m *ListOptions) String() string            { return proto.CompactTextString(m) }
func (*ListOptions) ProtoMessage()               {}
func (*ListOptions) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ListOptions) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *ListOptions) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *ListOptions) GetPaginationToken() string {
	if m != nil {
		return m.PaginationToken
	}
	return ""
}

// GetResponse contains the NodePools found from a NodePoolGetRequest.
type GetResponse struct {
	NodePools       []*NodePool `protobuf:"bytes,1,rep,name=NodePools" json:"NodePools,omitempty"`
	Total           int32       `protobuf:"varint,2,opt,name=Total" json:"Total,omitempty"`
	PaginationToken string      `protobuf:"bytes,3,opt,name=PaginationToken" json:"PaginationToken,omitempty"`
}

func (m *GetResponse) Reset()                    { *m = GetResponse{} }
func (m *GetResponse) String() string            { return proto.CompactTextString(m) }
func (*GetResponse) ProtoMessage()               {}
func (*GetResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *GetResponse) GetNodePools() []*NodePool {
	if m != nil {
		return m.NodePools
	}
	return nil
}

func (m *GetResponse) GetTotal() int32 {
	if m != nil {
		return m.Total
	}
	return 0
}

func (m *GetResponse) GetPaginationToken() string {
	if m != nil {
		return m.PaginationToken
	}
	return ""
}

// UpdateJobFinishPayload contains the state of the nodepool after an update
type UpdateJobFinishPayload struct {
	ID                string                 `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	State             State                  `protobuf:"varint,2,opt,name=State,enum=nodepools.State" json:"State,omitempty"`
	StateDetails      string                 `protobuf:"bytes,3,opt,name=StateDetails" json:"StateDetails,omitempty"`
	Name              string                 `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	K8SVersion        string                 `protobuf:"bytes,6,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	InitialNodeLabels string                 `protobuf:"bytes,10,opt,name=InitialNodeLabels" json:"InitialNodeLabels,omitempty"`
	QuantityPerSubnet uint32                 `protobuf:"varint,12,opt,name=QuantityPerSubnet" json:"QuantityPerSubnet,omitempty"`
	SubnetsInfo       map[string]*SubnetInfo `protobuf:"bytes,13,rep,name=SubnetsInfo" json:"SubnetsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	Size              uint32                 `protobuf:"varint,14,opt,name=Size" json:"Size,omitempty"`
}

func (m *UpdateJobFinishPayload) Reset()                    { *m = UpdateJobFinishPayload{} }
func (m *UpdateJobFinishPayload) String() string            { return proto.CompactTextString(m) }
func (*UpdateJobFinishPayload) ProtoMessage()               {}
func (*UpdateJobFinishPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *UpdateJobFinishPayload) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateJobFinishPayload) GetState() State {
	if m != nil {
		return m.State
	}
	return State_DELETED
}

func (m *UpdateJobFinishPayload) GetStateDetails() string {
	if m != nil {
		return m.StateDetails
	}
	return ""
}

func (m *UpdateJobFinishPayload) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateJobFinishPayload) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *UpdateJobFinishPayload) GetInitialNodeLabels() string {
	if m != nil {
		return m.InitialNodeLabels
	}
	return ""
}

func (m *UpdateJobFinishPayload) GetQuantityPerSubnet() uint32 {
	if m != nil {
		return m.QuantityPerSubnet
	}
	return 0
}

func (m *UpdateJobFinishPayload) GetSubnetsInfo() map[string]*SubnetInfo {
	if m != nil {
		return m.SubnetsInfo
	}
	return nil
}

func (m *UpdateJobFinishPayload) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

// UpdateRequest allows NodePools to be updated.
type UpdateRequest struct {
	ID                      string                        `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	AffectedFields          map[string]bool               `protobuf:"bytes,2,rep,name=AffectedFields" json:"AffectedFields,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	Name                    string                        `protobuf:"bytes,5,opt,name=Name" json:"Name,omitempty"`
	K8SVersion              string                        `protobuf:"bytes,6,opt,name=K8SVersion" json:"K8SVersion,omitempty"`
	InitialNodeLabels       string                        `protobuf:"bytes,10,opt,name=InitialNodeLabels" json:"InitialNodeLabels,omitempty"`
	QuantityPerSubnet       uint32                        `protobuf:"varint,12,opt,name=QuantityPerSubnet" json:"QuantityPerSubnet,omitempty"`
	SubnetsInfo             map[string]*SubnetInfo        `protobuf:"bytes,13,rep,name=SubnetsInfo" json:"SubnetsInfo,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	ETag                    string                        `protobuf:"bytes,14,opt,name=ETag" json:"ETag,omitempty"`
	Size                    uint32                        `protobuf:"varint,15,opt,name=Size" json:"Size,omitempty"`
	NodeBootVolumeSizeInGBs *google_protobuf1.UInt32Value `protobuf:"bytes,16,opt,name=NodeBootVolumeSizeInGBs" json:"NodeBootVolumeSizeInGBs,omitempty"`
	NodeImageID             string                        `protobuf:"bytes,17,opt,name=NodeImageID" json:"NodeImageID,omitempty"`
	NodeMetadata            map[string]string             `protobuf:"bytes,18,rep,name=NodeMetadata" json:"NodeMetadata,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	SSHPublicKey            string                        `protobuf:"bytes,19,opt,name=SSHPublicKey" json:"SSHPublicKey,omitempty"`
	NodeImageName           string                        `protobuf:"bytes,20,opt,name=NodeImageName" json:"NodeImageName,omitempty"`
	NodeShape               string                        `protobuf:"bytes,21,opt,name=NodeShape" json:"NodeShape,omitempty"`
}

func (m *UpdateRequest) Reset()                    { *m = UpdateRequest{} }
func (m *UpdateRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateRequest) ProtoMessage()               {}
func (*UpdateRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *UpdateRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateRequest) GetAffectedFields() map[string]bool {
	if m != nil {
		return m.AffectedFields
	}
	return nil
}

func (m *UpdateRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *UpdateRequest) GetK8SVersion() string {
	if m != nil {
		return m.K8SVersion
	}
	return ""
}

func (m *UpdateRequest) GetInitialNodeLabels() string {
	if m != nil {
		return m.InitialNodeLabels
	}
	return ""
}

func (m *UpdateRequest) GetQuantityPerSubnet() uint32 {
	if m != nil {
		return m.QuantityPerSubnet
	}
	return 0
}

func (m *UpdateRequest) GetSubnetsInfo() map[string]*SubnetInfo {
	if m != nil {
		return m.SubnetsInfo
	}
	return nil
}

func (m *UpdateRequest) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

func (m *UpdateRequest) GetSize() uint32 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *UpdateRequest) GetNodeBootVolumeSizeInGBs() *google_protobuf1.UInt32Value {
	if m != nil {
		return m.NodeBootVolumeSizeInGBs
	}
	return nil
}

func (m *UpdateRequest) GetNodeImageID() string {
	if m != nil {
		return m.NodeImageID
	}
	return ""
}

func (m *UpdateRequest) GetNodeMetadata() map[string]string {
	if m != nil {
		return m.NodeMetadata
	}
	return nil
}

func (m *UpdateRequest) GetSSHPublicKey() string {
	if m != nil {
		return m.SSHPublicKey
	}
	return ""
}

func (m *UpdateRequest) GetNodeImageName() string {
	if m != nil {
		return m.NodeImageName
	}
	return ""
}

func (m *UpdateRequest) GetNodeShape() string {
	if m != nil {
		return m.NodeShape
	}
	return ""
}

type UpdateResponse struct {
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	JobID string `protobuf:"bytes,2,opt,name=JobID" json:"JobID,omitempty"`
}

func (m *UpdateResponse) Reset()                    { *m = UpdateResponse{} }
func (m *UpdateResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateResponse) ProtoMessage()               {}
func (*UpdateResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *UpdateResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *UpdateResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

// DeleteJobFinishPayload contains the state of the nodepool after an delete
type DeleteJobFinishPayload struct {
	ID           string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	State        State  `protobuf:"varint,3,opt,name=State,enum=nodepools.State" json:"State,omitempty"`
	StateDetails string `protobuf:"bytes,4,opt,name=StateDetails" json:"StateDetails,omitempty"`
}

func (m *DeleteJobFinishPayload) Reset()                    { *m = DeleteJobFinishPayload{} }
func (m *DeleteJobFinishPayload) String() string            { return proto.CompactTextString(m) }
func (*DeleteJobFinishPayload) ProtoMessage()               {}
func (*DeleteJobFinishPayload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *DeleteJobFinishPayload) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeleteJobFinishPayload) GetState() State {
	if m != nil {
		return m.State
	}
	return State_DELETED
}

func (m *DeleteJobFinishPayload) GetStateDetails() string {
	if m != nil {
		return m.StateDetails
	}
	return ""
}

// DeleteRequest allows NodePools to be deleted. The lone ID field is
// the identifier for which nodePool to delete
type DeleteRequest struct {
	ID   string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	ETag string `protobuf:"bytes,2,opt,name=ETag" json:"ETag,omitempty"`
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *DeleteRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeleteRequest) GetETag() string {
	if m != nil {
		return m.ETag
	}
	return ""
}

type DeleteResponse struct {
	ID    string `protobuf:"bytes,1,opt,name=ID" json:"ID,omitempty"`
	JobID string `protobuf:"bytes,2,opt,name=JobID" json:"JobID,omitempty"`
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *DeleteResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *DeleteResponse) GetJobID() string {
	if m != nil {
		return m.JobID
	}
	return ""
}

// UpdateNodeStatesRequest updates the nodepools for a cluster with node states
type UpdateNodeStatesRequest struct {
	ClusterID      string                    `protobuf:"bytes,1,opt,name=ClusterID" json:"ClusterID,omitempty"`
	NodePoolStates map[string]*NodePoolState `protobuf:"bytes,2,rep,name=NodePoolStates" json:"NodePoolStates,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *UpdateNodeStatesRequest) Reset()                    { *m = UpdateNodeStatesRequest{} }
func (m *UpdateNodeStatesRequest) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeStatesRequest) ProtoMessage()               {}
func (*UpdateNodeStatesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *UpdateNodeStatesRequest) GetClusterID() string {
	if m != nil {
		return m.ClusterID
	}
	return ""
}

func (m *UpdateNodeStatesRequest) GetNodePoolStates() map[string]*NodePoolState {
	if m != nil {
		return m.NodePoolStates
	}
	return nil
}

// NodePoolState defines the node states of a nodepool
type NodePoolState struct {
	NodeStates []*nodes.NodeState `protobuf:"bytes,3,rep,name=NodeStates" json:"NodeStates,omitempty"`
}

func (m *NodePoolState) Reset()                    { *m = NodePoolState{} }
func (m *NodePoolState) String() string            { return proto.CompactTextString(m) }
func (*NodePoolState) ProtoMessage()               {}
func (*NodePoolState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *NodePoolState) GetNodeStates() []*nodes.NodeState {
	if m != nil {
		return m.NodeStates
	}
	return nil
}

// UpdateNodeStatesResponse is the response to the update node states request
type UpdateNodeStatesResponse struct {
	NodePools []*NodePool `protobuf:"bytes,1,rep,name=NodePools" json:"NodePools,omitempty"`
}

func (m *UpdateNodeStatesResponse) Reset()                    { *m = UpdateNodeStatesResponse{} }
func (m *UpdateNodeStatesResponse) String() string            { return proto.CompactTextString(m) }
func (*UpdateNodeStatesResponse) ProtoMessage()               {}
func (*UpdateNodeStatesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *UpdateNodeStatesResponse) GetNodePools() []*NodePool {
	if m != nil {
		return m.NodePools
	}
	return nil
}

func init() {
	proto.RegisterType((*NodePool)(nil), "nodepools.NodePool")
	proto.RegisterType((*SubnetInfo)(nil), "nodepools.SubnetInfo")
	proto.RegisterType((*NewRequest)(nil), "nodepools.NewRequest")
	proto.RegisterType((*NewResponse)(nil), "nodepools.NewResponse")
	proto.RegisterType((*GetRequest)(nil), "nodepools.GetRequest")
	proto.RegisterType((*ListOptions)(nil), "nodepools.ListOptions")
	proto.RegisterType((*GetResponse)(nil), "nodepools.GetResponse")
	proto.RegisterType((*UpdateJobFinishPayload)(nil), "nodepools.UpdateJobFinishPayload")
	proto.RegisterType((*UpdateRequest)(nil), "nodepools.UpdateRequest")
	proto.RegisterType((*UpdateResponse)(nil), "nodepools.UpdateResponse")
	proto.RegisterType((*DeleteJobFinishPayload)(nil), "nodepools.DeleteJobFinishPayload")
	proto.RegisterType((*DeleteRequest)(nil), "nodepools.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "nodepools.DeleteResponse")
	proto.RegisterType((*UpdateNodeStatesRequest)(nil), "nodepools.UpdateNodeStatesRequest")
	proto.RegisterType((*NodePoolState)(nil), "nodepools.NodePoolState")
	proto.RegisterType((*UpdateNodeStatesResponse)(nil), "nodepools.UpdateNodeStatesResponse")
	proto.RegisterEnum("nodepools.State", State_name, State_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Store service

type StoreClient interface {
	NodePoolNew(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error)
	NodePoolGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	NodePoolDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	NodePoolUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error)
	NodePoolUpdateNodeStates(ctx context.Context, in *UpdateNodeStatesRequest, opts ...grpc.CallOption) (*UpdateNodeStatesResponse, error)
}

type storeClient struct {
	cc *grpc.ClientConn
}

func NewStoreClient(cc *grpc.ClientConn) StoreClient {
	return &storeClient{cc}
}

func (c *storeClient) NodePoolNew(ctx context.Context, in *NewRequest, opts ...grpc.CallOption) (*NewResponse, error) {
	out := new(NewResponse)
	err := grpc.Invoke(ctx, "/nodepools.Store/NodePoolNew", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NodePoolGet(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := grpc.Invoke(ctx, "/nodepools.Store/NodePoolGet", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NodePoolDelete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/nodepools.Store/NodePoolDelete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NodePoolUpdate(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*UpdateResponse, error) {
	out := new(UpdateResponse)
	err := grpc.Invoke(ctx, "/nodepools.Store/NodePoolUpdate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *storeClient) NodePoolUpdateNodeStates(ctx context.Context, in *UpdateNodeStatesRequest, opts ...grpc.CallOption) (*UpdateNodeStatesResponse, error) {
	out := new(UpdateNodeStatesResponse)
	err := grpc.Invoke(ctx, "/nodepools.Store/NodePoolUpdateNodeStates", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Store service

type StoreServer interface {
	NodePoolNew(context.Context, *NewRequest) (*NewResponse, error)
	NodePoolGet(context.Context, *GetRequest) (*GetResponse, error)
	NodePoolDelete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	NodePoolUpdate(context.Context, *UpdateRequest) (*UpdateResponse, error)
	NodePoolUpdateNodeStates(context.Context, *UpdateNodeStatesRequest) (*UpdateNodeStatesResponse, error)
}

func RegisterStoreServer(s *grpc.Server, srv StoreServer) {
	s.RegisterService(&_Store_serviceDesc, srv)
}

func _Store_NodePoolNew_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NodePoolNew(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodepools.Store/NodePoolNew",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NodePoolNew(ctx, req.(*NewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NodePoolGet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NodePoolGet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodepools.Store/NodePoolGet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NodePoolGet(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NodePoolDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NodePoolDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodepools.Store/NodePoolDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NodePoolDelete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NodePoolUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NodePoolUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodepools.Store/NodePoolUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NodePoolUpdate(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Store_NodePoolUpdateNodeStates_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateNodeStatesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StoreServer).NodePoolUpdateNodeStates(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/nodepools.Store/NodePoolUpdateNodeStates",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StoreServer).NodePoolUpdateNodeStates(ctx, req.(*UpdateNodeStatesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Store_serviceDesc = grpc.ServiceDesc{
	ServiceName: "nodepools.Store",
	HandlerType: (*StoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NodePoolNew",
			Handler:    _Store_NodePoolNew_Handler,
		},
		{
			MethodName: "NodePoolGet",
			Handler:    _Store_NodePoolGet_Handler,
		},
		{
			MethodName: "NodePoolDelete",
			Handler:    _Store_NodePoolDelete_Handler,
		},
		{
			MethodName: "NodePoolUpdate",
			Handler:    _Store_NodePoolUpdate_Handler,
		},
		{
			MethodName: "NodePoolUpdateNodeStates",
			Handler:    _Store_NodePoolUpdateNodeStates_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "nodepools/nodepools.proto",
}

func init() { proto.RegisterFile("nodepools/nodepools.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xec, 0x58, 0xdd, 0x6e, 0x1b, 0xc5,
	0x17, 0xff, 0xdb, 0x4e, 0x1c, 0xfb, 0x38, 0x71, 0x9d, 0x49, 0xe2, 0x4e, 0xad, 0xaa, 0x7f, 0xcb,
	0x94, 0x62, 0x4a, 0xb1, 0xc1, 0x95, 0xaa, 0x88, 0x0f, 0x21, 0x27, 0xeb, 0xa4, 0xdb, 0xa4, 0x8e,
	0x59, 0x3b, 0xb9, 0x00, 0x09, 0x69, 0x6d, 0x4f, 0xd2, 0x55, 0xd6, 0x3b, 0xcb, 0xee, 0x98, 0x62,
	0x6e, 0xe0, 0x8e, 0x07, 0xe1, 0x11, 0x78, 0x06, 0x5e, 0x82, 0xe7, 0x40, 0x5c, 0xa3, 0x99, 0x59,
	0x7b, 0x3f, 0x8d, 0x9b, 0x4a, 0x40, 0x85, 0xb8, 0x68, 0x35, 0x73, 0xbe, 0x7c, 0xe6, 0x7c, 0xfc,
	0xce, 0xd9, 0xc0, 0x1d, 0x8b, 0x8e, 0x89, 0x4d, 0xa9, 0xe9, 0x36, 0x17, 0xa7, 0x86, 0xed, 0x50,
	0x46, 0x51, 0x7e, 0x41, 0xa8, 0xfc, 0xff, 0x8a, 0xd2, 0x2b, 0x93, 0x34, 0x05, 0x63, 0x38, 0xbd,
	0x6c, 0x32, 0x63, 0x42, 0x5c, 0xa6, 0x4f, 0x6c, 0x29, 0x5b, 0xb9, 0x17, 0x15, 0x78, 0xe9, 0xe8,
	0xb6, 0x4d, 0x1c, 0xcf, 0x56, 0x65, 0x9b, 0xdb, 0x92, 0x3f, 0xb1, 0x20, 0x99, 0x86, 0xcb, 0xdc,
	0xa6, 0xf8, 0x5f, 0x92, 0x6a, 0x3f, 0xe7, 0x20, 0xd7, 0xa5, 0x63, 0xd2, 0xa3, 0xd4, 0x44, 0x45,
	0x48, 0xab, 0x0a, 0x4e, 0x55, 0x53, 0xf5, 0xbc, 0x96, 0x56, 0x15, 0x74, 0x17, 0xf2, 0x87, 0xe6,
	0xd4, 0x65, 0xc4, 0x51, 0x15, 0x9c, 0x16, 0x64, 0x9f, 0x80, 0xee, 0xc3, 0xd6, 0x21, 0x9d, 0xd8,
	0xba, 0xc3, 0x26, 0xc4, 0x62, 0xaa, 0x82, 0x33, 0x42, 0x22, 0x4c, 0xe4, 0x36, 0x06, 0xc4, 0xd2,
	0xad, 0xd1, 0x4c, 0x55, 0xf0, 0x9a, 0xb4, 0xb1, 0x20, 0x20, 0x04, 0x6b, 0x5d, 0x7d, 0x42, 0xf0,
	0xba, 0x60, 0x88, 0x33, 0xba, 0x07, 0x70, 0xb2, 0xdf, 0xbf, 0x20, 0x8e, 0x6b, 0x50, 0x0b, 0x67,
	0x05, 0x27, 0x40, 0x41, 0x55, 0x28, 0x70, 0x8f, 0xd5, 0x89, 0x7e, 0x45, 0x54, 0x05, 0x6f, 0x08,
	0x81, 0x20, 0x89, 0x7b, 0xb6, 0xb8, 0x0a, 0xf3, 0x39, 0xe9, 0x59, 0x88, 0xc8, 0x3d, 0xe3, 0x84,
	0xfe, 0x0b, 0xdd, 0x26, 0x38, 0x2f, 0x3d, 0x5b, 0x10, 0xd0, 0x23, 0xd8, 0x56, 0x2d, 0x83, 0x19,
	0xba, 0xc9, 0x69, 0xa7, 0xfa, 0x90, 0x98, 0x2e, 0x06, 0x21, 0x15, 0x67, 0xa0, 0x1a, 0x6c, 0xf6,
	0xfb, 0x4f, 0x7b, 0xd3, 0xa1, 0x69, 0x8c, 0x4e, 0xc8, 0x0c, 0x17, 0x84, 0x60, 0x88, 0xc6, 0x2d,
	0x7e, 0x3e, 0xd5, 0x2d, 0x66, 0xb0, 0x59, 0x8f, 0x38, 0xfd, 0xe9, 0xd0, 0x22, 0x0c, 0x6f, 0x56,
	0x53, 0xf5, 0x2d, 0x2d, 0xce, 0x40, 0x47, 0x50, 0x90, 0x27, 0x57, 0xb5, 0x2e, 0x29, 0xde, 0xaa,
	0x66, 0xea, 0x85, 0xd6, 0xfd, 0x86, 0x5f, 0x31, 0xf3, 0xac, 0x35, 0x02, 0x62, 0x1d, 0x8b, 0x39,
	0x33, 0x2d, 0xa8, 0x88, 0xf6, 0x21, 0x7f, 0xe8, 0x10, 0x9d, 0x91, 0x71, 0x9b, 0xe1, 0x62, 0x35,
	0x55, 0x2f, 0xb4, 0x2a, 0x0d, 0x59, 0x3a, 0x8d, 0x79, 0xe9, 0x34, 0x06, 0xf3, 0xda, 0xd2, 0x7c,
	0x61, 0xae, 0xa9, 0x10, 0x93, 0x48, 0xcd, 0x5b, 0xab, 0x35, 0x17, 0xc2, 0xe8, 0x01, 0xac, 0xf7,
	0x99, 0xce, 0x08, 0x2e, 0x55, 0x53, 0xf5, 0x62, 0xab, 0x14, 0xf0, 0x5a, 0xd0, 0x35, 0xc9, 0x16,
	0x51, 0xe3, 0x07, 0x85, 0x30, 0xdd, 0x30, 0x5d, 0xbc, 0xed, 0x45, 0x2d, 0x40, 0x43, 0x1f, 0x00,
	0x88, 0xa4, 0x70, 0x9a, 0x8b, 0x91, 0x08, 0x83, 0x34, 0x28, 0x43, 0x20, 0x0d, 0x06, 0x64, 0x78,
	0x4d, 0x75, 0x06, 0xfa, 0x15, 0xde, 0x91, 0x35, 0xc5, 0xcf, 0x48, 0x85, 0x4d, 0x2e, 0xf1, 0x9c,
	0x30, 0x7d, 0xac, 0x33, 0x1d, 0xef, 0x0a, 0x3b, 0x6f, 0x27, 0x85, 0x33, 0x28, 0x27, 0xe3, 0x19,
	0x52, 0xe5, 0xe6, 0xfb, 0xc6, 0x77, 0x04, 0xef, 0x89, 0xcc, 0x89, 0x33, 0xba, 0x80, 0xdb, 0x5c,
	0xe6, 0x80, 0x52, 0x76, 0x41, 0xcd, 0xe9, 0x84, 0x70, 0xaa, 0x6a, 0x1d, 0x1f, 0xb8, 0xb8, 0x2c,
	0x02, 0x77, 0x37, 0x16, 0xb8, 0x73, 0xd5, 0x62, 0x8f, 0x5b, 0x17, 0xba, 0x39, 0x25, 0xda, 0x32,
	0xe5, 0xca, 0x39, 0x94, 0xa2, 0xd9, 0x45, 0x25, 0xc8, 0x5c, 0x93, 0x99, 0xd7, 0xa5, 0xfc, 0x88,
	0xde, 0x83, 0xf5, 0x6f, 0xb8, 0x1d, 0xd1, 0xa2, 0x85, 0xd6, 0x5e, 0x30, 0xdc, 0x42, 0x9b, 0x2b,
	0x6b, 0x52, 0xe6, 0xa3, 0xf4, 0x7e, 0xaa, 0xf2, 0x19, 0x6c, 0xc7, 0x5e, 0x99, 0x60, 0x77, 0x37,
	0x68, 0x37, 0x1f, 0x30, 0x50, 0x1b, 0x03, 0xf8, 0x96, 0x63, 0xb0, 0x51, 0x84, 0x74, 0x7b, 0x8e,
	0x17, 0xe9, 0xb6, 0x82, 0x9e, 0x40, 0xb9, 0xe7, 0xd0, 0x17, 0xc6, 0xd0, 0x60, 0xb2, 0x1b, 0x54,
	0xfb, 0xcc, 0xba, 0xb0, 0x8c, 0x91, 0x40, 0x8c, 0x9c, 0xb6, 0x84, 0x5b, 0xfb, 0x29, 0x0b, 0xd0,
	0x25, 0x2f, 0x35, 0xf2, 0xf5, 0x94, 0xb8, 0xec, 0x3f, 0x34, 0xfa, 0x07, 0xd1, 0xe8, 0x69, 0x12,
	0x1a, 0x3d, 0x08, 0xb6, 0xcf, 0x22, 0x4f, 0x2b, 0xf0, 0xe8, 0x24, 0xd2, 0x89, 0x45, 0x61, 0xea,
	0x9d, 0x64, 0x53, 0xaf, 0xda, 0x8b, 0xb7, 0x5e, 0xad, 0x17, 0x4b, 0xff, 0xc6, 0x5e, 0x1c, 0x40,
	0x41, 0x44, 0xcc, 0xb5, 0xa9, 0xe5, 0x12, 0xd4, 0xf4, 0xe7, 0xb9, 0xd0, 0x2f, 0xb4, 0x76, 0x12,
	0x50, 0x4e, 0xf3, 0x87, 0xfe, 0x2e, 0xac, 0x3f, 0xa3, 0xc3, 0x45, 0x4b, 0xc9, 0x4b, 0xed, 0xd7,
	0x34, 0xc0, 0x31, 0x61, 0xf3, 0xde, 0x7b, 0x33, 0x36, 0x83, 0x3a, 0x64, 0xbd, 0x39, 0x90, 0xad,
	0x66, 0x12, 0x07, 0x8b, 0xc7, 0x47, 0xfb, 0x50, 0x38, 0x35, 0x5c, 0x76, 0x66, 0x33, 0x83, 0x5a,
	0xae, 0xe8, 0xca, 0x42, 0xab, 0x1c, 0x10, 0x0f, 0x70, 0xb5, 0xa0, 0x28, 0xaa, 0xc3, 0xc6, 0x99,
	0x33, 0x26, 0xce, 0xc1, 0x0c, 0xe7, 0x44, 0x69, 0x16, 0x1b, 0x72, 0x5f, 0xf2, 0xa8, 0xda, 0x9c,
	0x8d, 0xf6, 0xa1, 0xd8, 0xf9, 0x76, 0x64, 0x4e, 0xc7, 0x64, 0xec, 0x79, 0x95, 0x5f, 0xe2, 0x55,
	0x44, 0xae, 0x46, 0x42, 0xde, 0xf1, 0x0c, 0x9c, 0x1a, 0x13, 0x83, 0x89, 0xf8, 0xae, 0x6b, 0xf2,
	0x82, 0xca, 0x90, 0x3d, 0xbb, 0xbc, 0x74, 0x09, 0x13, 0xf1, 0x5d, 0xd7, 0xbc, 0x1b, 0xaa, 0xc3,
	0xad, 0x9e, 0x7e, 0x65, 0x58, 0x3a, 0x57, 0x1e, 0xd0, 0x6b, 0x62, 0x79, 0xe1, 0x8d, 0x92, 0x6b,
	0x3f, 0xa4, 0xa0, 0x20, 0x72, 0xe8, 0x95, 0xc6, 0x87, 0x12, 0x62, 0x78, 0xd6, 0x5d, 0x9c, 0x12,
	0x8f, 0x4b, 0xac, 0x0d, 0x5f, 0x8a, 0xbb, 0x36, 0xa0, 0x4c, 0x37, 0x3d, 0x1f, 0xe4, 0xe5, 0x06,
	0x2e, 0xfc, 0x92, 0x81, 0xf2, 0xb9, 0x3d, 0xd6, 0x19, 0x79, 0x46, 0x87, 0x47, 0x86, 0x65, 0xb8,
	0x2f, 0x7a, 0xfa, 0xcc, 0xa4, 0xfa, 0x38, 0x56, 0x52, 0x8b, 0xa5, 0x21, 0x7d, 0xb3, 0xa5, 0x21,
	0x93, 0xb0, 0x34, 0xbc, 0x0e, 0x90, 0xdf, 0x0c, 0x62, 0x6f, 0x06, 0x9f, 0x83, 0x24, 0xf8, 0x6c,
	0x05, 0x5e, 0x98, 0x1c, 0xa3, 0x15, 0x50, 0x3a, 0x47, 0xbf, 0xa2, 0x8f, 0x7e, 0x7f, 0x11, 0x4a,
	0xd5, 0x7e, 0xdc, 0x80, 0x2d, 0xe9, 0xe3, 0x32, 0x44, 0x18, 0x40, 0xb1, 0x7d, 0x79, 0x49, 0x46,
	0x8c, 0x8c, 0x8f, 0x0c, 0x62, 0x8e, 0x5d, 0x9c, 0x16, 0xaf, 0x7c, 0x14, 0x7b, 0xe5, 0x1c, 0xdc,
	0xc3, 0xe2, 0xf2, 0x7d, 0x11, 0x1b, 0x6f, 0x5c, 0x22, 0x4f, 0x92, 0x12, 0xf9, 0xee, 0xd2, 0x27,
	0xae, 0xcc, 0x9f, 0x58, 0x54, 0x8b, 0x81, 0x45, 0xf5, 0x6f, 0x9c, 0x68, 0xd1, 0xd5, 0x65, 0x3b,
	0xbe, 0xba, 0x74, 0x23, 0xc3, 0x5a, 0xae, 0xdf, 0x0f, 0x97, 0xbe, 0x77, 0xd5, 0xbc, 0x8e, 0x2e,
	0x26, 0x3b, 0x09, 0x8b, 0x49, 0x6c, 0x5d, 0xda, 0x5d, 0xb9, 0x2e, 0xed, 0x45, 0xd6, 0xa5, 0x4a,
	0x1b, 0x76, 0x12, 0xaa, 0x6b, 0xd5, 0x58, 0xcd, 0x05, 0xe7, 0xf2, 0x9b, 0x3a, 0xee, 0x9f, 0x40,
	0x71, 0x1e, 0x73, 0x0f, 0xd6, 0xa3, 0x9d, 0x98, 0x3c, 0xd0, 0x19, 0x94, 0xe5, 0x07, 0xda, 0xab,
	0x03, 0x71, 0xe6, 0x66, 0x40, 0xbc, 0x16, 0x07, 0xe2, 0xda, 0x63, 0xd8, 0x92, 0xbf, 0xba, 0x0c,
	0x36, 0xe6, 0x3d, 0x90, 0xf6, 0x7b, 0x80, 0x3f, 0x71, 0xae, 0x74, 0xa3, 0x27, 0xfe, 0x96, 0x82,
	0xdb, 0x32, 0x36, 0xfe, 0xd7, 0x60, 0xe2, 0xc7, 0x43, 0x2a, 0xba, 0xb0, 0x7c, 0x05, 0xc5, 0xf9,
	0xcc, 0xf3, 0x46, 0xb9, 0x04, 0xaf, 0x27, 0xb1, 0x4a, 0x8f, 0x59, 0x6e, 0x84, 0x15, 0x3d, 0x18,
	0x0b, 0x13, 0x2b, 0x5f, 0xc2, 0x4e, 0x82, 0x58, 0x42, 0xde, 0x1b, 0xe1, 0x7a, 0xc2, 0x09, 0xe3,
	0xd9, 0xcb, 0x81, 0x5f, 0x11, 0x6d, 0xd9, 0x30, 0x0b, 0x5e, 0xe4, 0x93, 0x39, 0xb3, 0xfa, 0x93,
	0xb9, 0xf6, 0x1c, 0x70, 0xfc, 0x79, 0xaf, 0xbd, 0x35, 0x3c, 0xfc, 0xde, 0xab, 0x20, 0x54, 0x80,
	0x0d, 0xa5, 0x73, 0xda, 0x19, 0x74, 0x94, 0xd2, 0xff, 0xd0, 0x26, 0xe4, 0x0e, 0xb5, 0x4e, 0x7b,
	0xa0, 0x76, 0x8f, 0x4b, 0x29, 0x04, 0x90, 0x6d, 0x1f, 0x0e, 0xd4, 0x8b, 0x4e, 0x29, 0xcd, 0x39,
	0xe7, 0x3d, 0x45, 0x72, 0x32, 0xfc, 0x26, 0x94, 0xf8, 0x6d, 0x8d, 0x9b, 0x38, 0x6a, 0xab, 0xa7,
	0xfc, 0xb2, 0x2e, 0x59, 0xc7, 0x5a, 0x5b, 0xe9, 0x28, 0xa5, 0x2c, 0x37, 0xc1, 0x59, 0x1d, 0xa5,
	0xb4, 0xc1, 0x39, 0x6a, 0xd7, 0x33, 0x98, 0x6b, 0xfd, 0x9e, 0xe6, 0x1e, 0x50, 0x87, 0xa0, 0x4f,
	0x24, 0xc6, 0x71, 0xbf, 0xba, 0xe4, 0x25, 0xda, 0x4b, 0xfc, 0xce, 0xa8, 0x94, 0xa3, 0x64, 0xef,
	0xed, 0x01, 0xed, 0x63, 0xc2, 0x42, 0xda, 0xfe, 0x72, 0x1c, 0xd2, 0x0e, 0xee, 0x5b, 0x1d, 0xbf,
	0xaa, 0x64, 0x3d, 0xa3, 0x60, 0x3e, 0x43, 0x7d, 0x51, 0xb9, 0x93, 0xc0, 0x89, 0x9b, 0x91, 0x49,
	0x0a, 0x99, 0x09, 0x01, 0x70, 0xc8, 0x4c, 0x04, 0x26, 0x46, 0x80, 0xc3, 0x66, 0x02, 0x7f, 0x32,
	0xa9, 0xad, 0xae, 0xf3, 0xca, 0x5b, 0x7f, 0x2a, 0x23, 0x7f, 0xe4, 0xe0, 0xd3, 0x2f, 0x3e, 0x1e,
	0x1a, 0x6c, 0x38, 0x1d, 0x5d, 0x13, 0xd6, 0xa0, 0x23, 0xa3, 0x41, 0x1d, 0x7d, 0x64, 0x92, 0x11,
	0x75, 0xec, 0xc6, 0x88, 0x4e, 0x9a, 0xf4, 0x9a, 0xf0, 0x7f, 0xef, 0x8f, 0xe8, 0x64, 0x42, 0xad,
	0x26, 0x9b, 0xd9, 0x24, 0xf0, 0x57, 0xd0, 0x61, 0x56, 0x0c, 0xb0, 0xc7, 0x7f, 0x04, 0x00, 0x00,
	0xff, 0xff, 0x18, 0x79, 0xea, 0xd3, 0x23, 0x15, 0x00, 0x00,
}
